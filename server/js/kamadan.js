var GuildWars = {
  getItemName:function(model_id) {
    var item = this.getItem(model_id);
    return item ? item.name : "Unknown Item";
  },
  getItem:function(string) {
    // Get by model id
    var numCheck = parseInt(string);
    if(!isNaN(numCheck)) {
      if(this.common_materials[numCheck])
        return this.common_materials[numCheck];
      if(this.rare_materials[numCheck])
        return this.rare_materials[numCheck];
      return null;
    }
    // Search by name
    string = string.toLowerCase().trim().replace(/s$/,'');
    var checkItem = function(mat) {
      var name = mat.name.toLowerCase();
      if(name == string)
        return mat;
      name = name.replace(/^(bolt|glob|vial|lump) of /,'').replace(/ingot/,'');
      if(name == string)
        return mat;
      if(mat.aliases && mat.aliases.indexOf(string) != -1)
        return mat;
      return null;
    }
    var found = null;
    for(var i in this.common_materials) {
      if(found = checkItem(this.common_materials[i]))
        return found;
    }
    for(var i in this.rare_materials) {
      if(found = checkItem(this.rare_materials[i]))
        return found;
    }
    return null;
  },
  common_materials:{
    // Common mats
    921:{name:"Bones",per:10},
    925:{name:"Bolt of Cloth", aliases:['cloth'], per:10},
    929:{name:"Glittering Dust", aliases:['dust'], per:10},
    933:{name:"Feathers",per:10},
    934:{name:"Plant Fibers", aliases:['fiber'], per:10},
    940:{name:"Tanned Hide Square",per:10},
    946:{name:"Wood Plank", aliases:['wood'], per:10},
    948:{name:"Iron Ingot", aliases:['iron'], per:10},
    953:{name:"Scale",per:10},
    954:{name:"Chitin Fragment",per:10},
    955:{name:"Granite Slab", aliases:['granite'], per:10}
  },
  rare_materials:{
    // Rare mats
    6532:{name:"Amber Chunk", aliases:['amber']},
    927:{name:"Bolt of Damask"},
    926:{name:"Bolt of Linen"},
    928:{name:"Bolt of Silk"},
    950:{name:"Deldrimor Steel Ingot"},
    935:{name:"Diamond"},
    943:{name:"Elonian Leather Square"},
    941:{name:"Fur Square"},
    930:{name:"Glob of Ectoplasm", aliases:['ecto']},
    6533:{name:"Jadeite Shard", aliases:['jade']},
    942:{name:"Leather Square", aliases:['leather']},
    922:{name:"Lump of Charcoal"},
    923:{name:"Monstrous Claw"},
    931:{name:"Monstrous Eye"},
    932:{name:"Monstrous Fang"},
    945:{name:"Obsidian Shard", aliases:['shard','obby']},
    936:{name:"Onyx Gemstone", aliases:['onyx']},
    951:{name:"Roll of Parchment"},
    952:{name:"Roll of Vellum"},
    937:{name:"Ruby"},
    938:{name:"Sapphire"},
    956:{name:"Spiritwood Plank"},
    949:{name:"Steel Ingot"},
    939:{name:"Tempered Glass Vial"},
    944:{name:"Vial of Ink"}
  },
  item_icons:{
    921:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIQg5eykQAAADPklEQVQ4T9VTXWyTVRh++p22X9uv3defdXOj7Wb3W2BOrSONU34cgzpDRB0h/MkFRqakiUZCAngBF6gxDhNvvGWJJGYLjmggGQkaI+wn4oUXAlkidVtlDEbbtV9b2rEe37NuhMXoPU/y5Lzve87znH88+WBL7TJ0rQ2edXqJW9LZQpryYqn835CW2mXYD+zZPuAyK0coriiV/h+PG+jWP9f0sle1+eqqHBspFwaPVujxeMxOp7OMwhWTPp4w00Km4UH8NoKBepWUDqrpS12Q33qj61O7YtxFsb1UKmGFm1EPJZtOotplMDIGMZuArr092PbuwZ5IYk7TUc5L5RJWbKHSVeZUFQaHtSjbDJKFagrRsm9n9+5Vq7ySgTGR/9vATFt89Vn/+y5X2dqnyhkaWz2mNzcFT+/vaLoSanIPbOoIvWM2MlRWuGppuDB+BLFH4+FjH34pL+S7u1/vhC71G+peCGHLhFYZnxyrfL6uOiBlLuPerBu8kBOHalhULkGvKHBsoSlefCWMYnEe8SkPon9cBc9kYHHUoWiYwV83x5H5/VstqT2Il9ts8mw6LYwWhIHEuUUXi15nPw9dxIn3euguzNCxckimChSKdhgtXvx09S78jT7rleEfj3/+yck+xYAAaRdXIsmM+SVmcre0rkV9cwNGB8+hkNVBrWoEs9Ug99ABs8GC5Nh3sBvy2HuwJ7Stc0PEBFSTnrEiCtYbvwzvcDkV69uRj1Dj9yFx6was5U7UPu1BLpfC+nAYsjeEP/t7kaVLYMgGjx6JvDY2OjKhr6n2tu0Ib3W3tLQheWcKoyOXMTjwDVIaJ7PV2HvgENz1NdDLKrzPbEY+MYvx/ksTR3s/6E/MzS3+lebgmsDH4c6NZ2t9tvsdLzXw831f8NjkONdScT4/P8+1bIbHs3keTz3kl85+xvdsax8m3VZilTAQ9+qXJOz/+tSh2zN3YnxmeoLPppN8GbFYrHjxh+/jvae/inZtaL0g66WI0AixeJoC4kF5ie2qqq4OBJrXnB8c3P7rtWvTQ0ND0TNn+kY0Tfub+hPEaWKUOEXMLRsIyESVKD6L1+fzdE1OxsSgW0QhvkfUiFlinkhPGvgHGtARxRmQbKgAAAAASUVORK5CYII=",
    925:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIQbewwQXAAACzElEQVQ4T+VTS08TURQ+nd4ZOp22FGu10fJoYQHEBpBoglE0GkmMupCdC01c+AtcuJGVf4O40r1RExM1MRriCzSCRhEkoa3QlqGdYTrTed2Z672paI2ycO138+XcyfnOdx9zD/wf4ChRc/ongj9iK1iBRClQkrO5zJH9u6OTq7K2RL9Nyt/wN2fxytHB64CE9LH+LpSIi+cLsuLzQS428zU/bZpQphrclP59B3xJs/jTQ51TcZE/JPFcqG9PVKxsKv0vV+RZQqBENXZT+suARbZ1cirX1Xltcuwe5+Fde2MihHgONKMB2VRMQlxbab4gv6K6n0dhhejkYPLCxIHeiYtjg72Hs6kbUYHLhRAKqI0GSG0IEjEJ8rIaaA+JByNSqFJcq644ABatJcyAbxfC6dHMnqnuZOSqiEjvurIV2DIdSLV3gGFjcDAGFAD4UNxAlyaGT1s+qS2syp9prckM/HK9Eazotrgs1zeEoJDleIRiYQlSHWHwfQ8sB4MU4iEeicGXbzXu/Hju+JO3y+/qplPcvgNns974mk6IGZ/g9HDPPhEhgmTNANf1wHExEDp4QLisa6aiafzj+fwb2/U+bhuwW3W6k9K5h+8LDxKRkHz5xNCIiz2w6eqm48Kaoldu3n19a261MuMSL+kHiLahmM+3DRiEimKp2CeLS6Xap9G+1NGRnv0Jdv6q3oBkNFy98+LLtGHhpysl9UO9gWUX+6VWA+IRUqOx4mBfNWzHGEjHz5TrZqBNCNn3Z1cefVqvPqL5RfoWCqyYztVWA5+S/V+X0i6UVF3gguNRXkiUq9r69LOF255P5mhOYXnKLRZbDVpBPPo+Agiy+Vpd79odG9Asp7BW01/SnNaUNLGTAeumcEm3zDVVXzYJzhiWl6+oxjxNVZuKJnY0oOfAnkc2XdcvlhVjybSdhuV4rCPZ1v8JbJEEZYaStXkLAL4DkMtTun63sOsAAAAASUVORK5CYII=",
    929:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfbAxAWISrsG2j0AAAABmJLR0QA/wD/AP+gvaeTAAADqUlEQVQYGZXByW5bVQCA4f+ccz3PSRpnaAaolbYBUtqUThRBSQF1hwAhJBawhx0SOyToS/AQfQBACERBLEpVQFS4ghTS2LXrxI7te32vfedDJRYsGCS+T/A/PX/y5MZLpza/9aIw37fsG5L/JgC5AmkgUyqVKq+dOHHt7OJ8PqUjNFHB4F8sl0qVK+fOvF5Ipxdm8+VXOrbd/qnZ/ERLsfbFnZ9pjj1M20XwD6anpwvvXLr82bPHjp/f3msxcF0mUYQQCSqVPI1+j33LxXbCuuTv5Hq1enyuXDn9+34HRIKRNyGZzCBFjDUcYto2kY4JYjD4i3Flc/PshVpta326/MHy4mHju51dOmMHT0sM18YKIpAKL5ah47nCQiN4qAapt199+c1TT535eG1hKfn5l1/xm21ihT5SKiItiTUPhfhxjOd6nRv1+nUjmXIMwDh+8eJ755+7dHVhZkbt93oUchnms4rQGtEzRyAMUjIZuDpKuGHkbjca3+zev38NaBtAulIsXKn/cEs1kwYSycpKDXnQplosUY9a3DGH9Gxz5+69e7dae+3tiefdBm4CHQWk9w76By3TwYd0NpmZ6pgm7b5J17RISEUswJF6enX20SOVct5cWpjvNlqt7wFbAYE9mfSb3f163ws741Rq3QzcUhCGKGHQ913m01kOZfKM41EimU2vK2VsDAaD62PX3VeABhxgb2iZzUa7efeZYxsXNuYX8y3HZBxGDD0P0/PxiXBjTSBEcXFh+YXdxr1PJX/SQAC0Th97rFMuFOZM32VpdpbIm3DpyU1KCUUxmQWtEYDjTcwgCObk+dMbjwM5IL22tnbuwWBg9KxhtN3bZ7vdppJKEVh9/NjH8cZkpCCJQMa6DwyNN57e+rGSLl71tZhZObz0bn1n5+spQ46mi4fKDWvEgedzs3mfqVSGXBwyCgK0lnqn12oAE/X+1uWPyuWpmmkP5x45VKwW8qy+tfViuuhP2B1axGiKhmAln6Pr+QyCCCW1tuze7urq0RW1urr8YX88KVmhX02Ggq0jT5AXmlZvQHcyZhwG+FHEwA+JtMDXYIehKOWnjupY5oyu79FxbGq5IrVimb2DPrd3t8klsxyZqTIzHqFjUEryy8BkPpNiYvsIIZFow2g5IzIiQcIw+HU0wBz7pBKSqtI4lskDq4tSCYRK4OuYg7GNEhopFLEOMFKpIkrH9CNNIZlDhoCUNCcOUkoilUUKgQxjtFSoRIY4DgjjkFjG/AEwS9oW+mWuLAAAAABJRU5ErkJggg==",
    930:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIRu9xWjOAAADh0lEQVQ4T6VUSWxbVRQ9//3Bw3c8/NqJY2ewXcemGRoHmdIuEFGjplVBjbquxBokNizYgGCJ2CEkuoIdC4SERJmkEKWAalEJpUnaJmnSOqPTuLhxPE/ff+L9KJUgqKse6bwrvffOWZz77sOLgjmqzwM5qiaMI/4HzzNgbbD547z37W7icPjgai2TJz8sNHeW6FmTUj+8RXHcwO7hxamTrD3Y1rl3T/O9/aLG42rHKDqdTvW2IP/67eqPH6ew8YDebZkC1lwoGJfLFRq2d331aWDyg8no1GSo3nbPtR8jQtxI2IP4+e95cooNxXpY1+U/W+nfZah5qtMODQatkb4JI5a6xo2dOffyBMauXUCItWLcEUOXLCBfriFiDUAK+rBYeOgas0VD862dlAatYoYkJDjn+xP+gV63143Z5VmQQS8Y5gREw4lE9BTGkwlEeiK4vn4DV+KX4VPbk284Eu9QrUQ6xU7PW97Xrt452MM32b8Q5L1ofDQDbb8EwWFDIZ1BLpODXWBRhoIP1z6HxhOE0HGBGgTYAd4XPYnge0qbY0e4CGKsB0vbG3DzHKQrSZCtMja3szioFjESSKJlqNhvlxF29Npv1lZ+IcTgrX+UM8ShsBiFhPTTJkS4wFZ0TH/xGUqqFYZO4Jf6sKLnICsaht0jaDGMQMUSzYADoc2UmD5UFB/m1Ye4V80jtZuFv3wafIXH4MCrqCp5yBsZDBgh7BQPIFBjTQdLttRMvYv1VFe1DGSewevCOJa1XQw7X0HbIPDYJRTyJVj4blyMn6d9a8CwGKgL5IkOvU5aSr3Yz7vWolYv4t1JhPuHECNhTBd+Q7HVwK3sPUi+IGqcjkwzjVhwCAFHHIvNRxs0xByr0nVWvb/VQcRogOvukXUFVsWOhfYaLKyIFXkd/o5ONJga3IKILRrikrzbmNm/9XVDb8yZD0kxDKO0rG2Wz9oSU82azKzIizgfu4RzZ9/E+l4ahDMQdFixaQO+25supwpzN3LtpzNUu/rsKbfonNVE0eP2u3uHuhwh40F+lTze30Ny8BIqbeCnwn3jk+3rdx5Vd74sK5WbVHOX8uDfw2SlfMnFieMSIwX6LOFRidjP1NUiKwjW6m317kKpVv2eBjdP721S1in149NooTxB6TYrAQnTPjvp7DaoMEv3zCk0qxndIY4bPIO5z1F2HFXzI6lRmiP8v0/lBQD8A0uwWKmA4lP2AAAAAElFTkSuQmCC",
    933:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIRLEGdBqAAACpElEQVQ4T41UW0gUURj+Z/bijDvr7rqzu2oiKUnJCkl5qwRNlKikIn0Qqn0IosfQl1iieuuth4qgp6AXSdFuJLWCRbTdwxtiIvvSqmzuTu7FdW8zzvafLWPcdO2Db5jzf9/5zj9nzowK/h90IcvW8bTaSVMQTciyH2vSb2l7GHcXGm9W52ujjXpdupxhRrFWTgSaXHKBA+APVlXcsvOmXp5hdEGaBpFldCiZkDjKDW11TZWzorzUYS0pggTaZYYJiGq1BzXSvpwrgAI17Dty8uilU2cc4E3GIL/YBntKS3lIJldRF4lpywCO48xmI3exueW4SoiEQL/DBkxJCYz7fO6lyMpbtAjEt1WAtru762rjgaaz0ZUIzH6bgfmFJYinEskffuEl6l+RIWKkyCULVGtra1tPT++w0WjS+HyLoOc4UNNS8pzjfB8G9KOHdBAj5s06KGhvO3HDYLRoQpFwZp9j8VW4d//B5J/VJ5HxjBPxT0BTU0vt3pq2WmtRGUiiDExeHoSW/f6hgaEBlMlkcoDSxEuQHcB0dBy7QGlCMD3xCdh8HdAqzdpl53Uy+QNyHikT4zqyA1jeYt1fZCkAbZ4W0lIK3rvfTAmC8A61WWTmuZXIDjCNj4/tpHBvWVYHAX9g6c7d2y6sTyEzu54NZQBjMBhO19fVC3NzHnj0dOjnlWvO0Vg44UZtAbmh9XUoA9jKyl12j2fGKqYkaG8+bMZOitdgLYAaOXmbQhkgFdus9s7OLjqVjKYHBvvGvF7vc6wvIzddnUAZoOctNk04vAIfP3+JPn7ybBhrr5GLyL+vLRvKHwrV0FBX5nKNqPoHH74SUyI5NGTztmyfYEOA2Ww+5HK9cMtSegTH08hgRskBZYA6GAwVxGLx73hPPhY8x9sB4BfVBeGexMPc2wAAAABJRU5ErkJggg==",
    934:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAALEgAACxIB0t1+/AAAAAd0SU1FB9sDEBYhLAV4zcEAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjEuNv1OCegAAAOZSURBVDhPYyASMEJpkgFTRKCrE5CWBLHBIiQAkAa+uuK49UAaZAgnSJBYwDGxq7qEi5XVMDncbaqutlpKRWlSLFBcFIgJeoc5NMA5Pi7K54OetuqSeZNqLnc2F57vaCt6ys3N7QyUJ+gSDgkJCa9JbWXfmyuz/hfnxv3PTPD9pKersbK2IHYaUB4UHjgB+4wZ3Z2pMV53qguT/7ZUpP8PdNP/P3dS6VtdHbXuvq6Cg0A1mkCM0xuiKcmRe2ZOqPyfmxb7v7Mm439soMP/1tqUv20NhT/K86JeAtXYAjErWDUaYAFiEXtr49aS3PhTSxdO/V9RkPS/MD38j7mJ2hZ/b4erSREe/80NNCqA6gTAOpAAe1FBXH96akRHVXnOiSmTGw411xf9L82N+T9vasMvbU21ttAAl6lJ0X7/o4KclgHVK0K0QQBHfGxARn1NzjdPF4v/lma6//08HP8oK8o87+ko/xIV7nmqqyn3X0tj3v+kWKf/bXVpP2tKk/KB+iCucHa2NDx6aOO/nq6K/+6u5v8bakv+iwsLngVK1Xu5WtzJSgm8rqujssjb3epSUVbY/4hgp4N6OsqVQHllIGZi0NVVNlq9fMqPhtqc/zY2hruUleQeWJvqHwJK+pgbafyOCnb+l5kUvjrA03zdhM7i/0JCfPXWFgbJbdUZ8ZV5ETFAdQxyqYnBO8KDXf4bG2quU1dX3Rng4/LW18u2N8DH5p+thc7/Kb21b5ysdRfJSIoc62wp/rhuae+fkpzoR/ZW+nNABvDYWhtl93WX3F6/dvo/O1vzB0YGOv/L8qP+J0e7/zfUkf9fU5nyNzcr+GtWiv/LIF/bz2nJ/k9kZcUmAfWGgQxgBiZRHSAd7e1hv7YwL/Z/X0fefz0dtf/62vL/A32s/rs5Gt8XExWeWJcf+qm9Nvt/T0vR/+7GjGd5aZ6LQAawpWbEZFZVZp2LifY9OKG35n9yYvB/E0OV/yG+Vt9Dfaz/ezuZ/JGREKgvLY743AqMjfAA56/G+uoLgHrjQQaAEpCOi7PVOnl5qUmeHg67/f1cDwjwcfWHBzqt9HK1/KyrpfLfyc7gq5KCxP/ocPf/CfEB+4B6AoFYBmQACAhzsrGBBHyA2BWIA4DYzMJIO4WDja26rir3AtB178yMNN9HhLgeZ2NhKgTKgxITPE+wAbEsEAsDMSi78gMxKL1LAbEhMzODJ5DOAeJMIAY5Wx+IORgYGBgATcc/J/v0QNcAAAAASUVORK5CYII=",
    940:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWITrxrHiQAAADNklEQVQ4T6VUS4/bZBQ9n+3YjvPq9DEjKpVOJUSF2CAVCXYVe34TEj+BLUKCFRsWQFUEi0GlYoFaWphpNbQolEdSJpmaJHbi+PW9OB40FR2640hHspNzz3fPvbbxf+GSDhmSlhTPYf/SZuflZC15eaTxyBbpk1pc2Np49a3LFz/QBnerWuqo46nJLJcvbXa2eoFXCqvf3h745x9M17NcuCNTFyPbCl4xGvNSy2viyqUX3n3z8ovvuI4Hz3XgeBob3T6qLOZ9AGF4nMtGrYZyNBpdWSgY18OHN/c+cuJl8cTxWghDH+dO9aCVZoFGbxBhcPYMaifA0ngwUQQ/aENpAeF5mGV5/XiW3XXiNLslVZXmVYn5ukLg+7C1YcgWu1jhTNeF0AXieYZlmiOTgqYRkroVcwZTp1DqIMmTw65vUVU5DMeWVBLTpECyqqGNAyktcimRKQeGc61kiW/3f75Bg1GzgdpI8+jiIMT2VhdGSdQUCC6o5XtYrlaMZLHR6/DehxA0VHb55yz9jrXjZo14OFlM+2F4NRRioITLtgO02x1oLZmbRkIjCnxIzb3TIF2X693fpx9ba+83HRRa44f98eyLZUlhGKHX4gx0hVMR/zYKvSjkcEt02VHkCxymiwOt9Zq1tjFoHo5VFYhx2A+Q1yv8lSksigpJrniqxWSV8V4jMxJ7B4vk9qP4S9ZMSHkUgbDJqpKuMa9vn+5s5dIKqyoOjHmtxZMCPLnJ72Fnd3h9HC8+Z80+WTw1MMZU4/ny4fl+50qv2z4L66JmtsB30fZbHBzttKi/2vvlfWpvsqZZ49F7cIyY+jvDyepToxWymmtVFhlXKmWNMOhg77eDn5RSv1I7J5vozxg0mM/L+kYofDiO5Sba8JyQCw3gGIPd0eF9asZkeaQmThqox4vV4SiepUIInl6gVDUnnKude8MfF0V9j5rmdL4h/+CkAduViXaCNOr1md1HPwhw/c7ws1vD8Xt1Xe9Q0hg8xfEQ/w1vWVY5H5zXopbTvfb9g6//iJef8PdvyCZ/1YiO0XwwTqL5YFwgr54bRG/EaX6b101xk12Rz+B5Bg2azk6Tm2RKTsn/FAPA36jFqqD2fWuDAAAAAElFTkSuQmCC",
    946:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWITuGq0gGAAAC/klEQVQ4T7WTy08TURTGpzPtlHampZ0W2qIFbAEpKCoBCVgwykIwbAwhcePCxB2iwWg08W9wb0zcuCEuIHEFURe4kBCKEXmUR3k0UBFKW5lpZ8p0Xp5pwUhBXPklv9ybOd/9Jveee5H/JXR//KcOjOpIALqOCrLoaZuzH+YOAANO1IHB1H2x7EFTaXG1qDPUukjlOcPIni1OGIMam7Mcr4MA3fwWHV+NJ8kbDeV3CStWXeoi6yaX4jOigqxAPZOzHdVBgGpI8KIcHQ9Fl82EPXO5ynvJQuClU+GdUajFAUU15uvPPUpA5lHXmT6eo9tYQZiuchT60TQv1ZSaUmW2QsvKTjIFHiHr3teR0x5fSARKCLTy9cjcbJpm5nwlxr6epuJPdzqqB6FcAeiyxn3lB4izod0ZDJV+dlaS14YnwyM6kUdSLIfISprCMMy17/ut/ACZRpCN2e29N75K8kJCEgsdlH5jMZJGrGbZgGHZVhty1pyObAG0+3GOGRJYYa6v3X2PsJFuitAi1Y0+vc2AUlA/tOa4iyKLMrI3scot4JhEea2o5/wps+bJyy/vFze5gKwoIfDwOWsuAKtykS1OM9riNOmdbBL+jSA0tORHcItfaq4p9oClPL5Np6a20m/BHwbUjmWlBuiv19i7PUXGh2ddZH+J3Xy73G217Ca4TU6Q1yIxPnaz1dNJSjz1IZR8pyjKOqxRO4EDkhqgCX5PJr6uJ6dJU4HYXFfUQBTgtU2+4l6W4bHlaHKCKsRJn41oPG00kmaTxt7uo14sbqeDGbh4GghQpQWMQCVQB+CNVVS932voStAZm8VEahxmo85h0GrmY3Tg1WhkkOHEAPjGgUMqANRXqPb7HI4hPQYtct+Io49bvaah4Wd+pd6GD0DtCmADNPldEAH19alXNi4pSAQ6EhIkJUhz0lpXveOWLMvubxFuQJTlNfBkz+BvUh/PHqCGMbyksJ/no2tXaxx+VItiy9vsJHxnTwrIV4bh5ZggoXt+N9kbCDNjgqJEfgHaty0INnO2ZwAAAABJRU5ErkJggg==",
    948:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIRe0cyTlAAADEElEQVQ4T+2T7UtTURzHv9u92517uHd3OlyuTS00K/GhwTSl6AFEQale2CsloiAKhIJSe2FvCqEIX1UQve4JIoqSMIii6MmsdCrYfNhtq93p3HXONdc2Z+daQu1F9Af0hQ/ncPj+vuecH+fgv/5N1eXl1p7us3VkyhOUK4t/EdXZeXwdz/McmasI2rbW5vNSMJAym01yiE42rUrxa1yV8tSho835+dw1Fc/10CkqvK6waMetm1ecdbv2KfYfOda2BDwmvshPO9nt17gq2pJrahp5/7FhOhKpmnJ/quC1SudXUTAMDAyOjnh8D4hHcDgcvCiKsj+VGUD5xYCywGbdJUUXsoddLnZekrCxKA/TASkpiKH7vEajaz/Z/sgv+iNiIDCZGYDK9bZyKSzVT01OcYllYJnckkqrUVG2hY8loztrnDUH3r55oxeDwX4pHHZndpTaUuasqSm02y/0XELDtirMzM4gqVag99kTNNbX5Ue/+SzirLd3wuP5QPyRzBPoA6LvdHZOjk1N+hQMBjG3sAivzw8Dz2JsdARGVqsY8/gnItH4Q+L3/3ECk15vjcbjjneuUdx50Ien/S74g3PQMTSK83IhzSygYE02coy6WpqmWVJC/x6QxXGaDkepnYmm4jAYdNCqVbCajdi51QlncRG6ujoQCsyjqnyTVqNSWkmNeiWgtbnZ/uLG1ctNu2tbPNNhpBUKuH2z4IxmnDnbjRcDQ2CWaOxtOUz6sAemuIK7fvHcCVJqkQPYxh3192z2koO5DE2ZWRZGM4908jvyrEYIY8/BqGn0Dg1j/GUfEvNh8Ja1iDGsidTmUXq9nl1KJxtMZr7w9sNHade4V0lyUFFagsGhTwiMfwZlUKfFUGwxOxXBkOB19/UPz45PCa8nBOGl/JR1DEVV2wvs2wVBUKXSqGQorNHrspjYYly32cLaQrHEqCe0eHeDzZoc834JkpoZQpwwIAfIGAlmgvx55Ll8PE6lgpJSoCqRgDsNvCJr8h+IEhYI5JkhlvmZZDEE+X1oCHKPcggJgp8g7/qbgB8/3h1lOB7ilQAAAABJRU5ErkJggg==",
    953:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWITQWFFWXAAADjUlEQVQ4T4VTXWhbZRh+Tk7+T9IsWduYJW1i2i6pNnOzq3arYOukzCHiHwxBkIHgRS+89dp7wZuBeCGIiMPpha6rW0qZrKDr3LrUunVt899uSZYmabrkNDk5yfH94lLaMvCB5/Cd873Pw/c+53s5PB3sO09UP1k3iBJRIe7B0wyEdpvwca0mnfY6uxyyKBlODg3dCc6Hzsdisb9pf4u4Y7TbgNMB7vfffuerTrt5XCw95qpiGX5vL8ZeGUE880ienv5t6rvJ4KfVKtaovs5E7JgMzKh7ZPDFy4FA4MQLR/2cuF1Dn/dZ+H19GBo/A7NOpzLWZd9SPGHLbGzeoPrHTKhiD4LW5XJ89uro6PMmgQdvsGDw5RNw9nhwfOx13JyehfUZBzYlDj3unnep3sc0TNgy0HTbXSf1RhuKJRGLoSXEw2vQ8Db8eX0ehvZOXPjhF0z9PovoevoB1ZuIzdO3DAwPUw8j4XAUl6aukngZhcImZmZmsHDvPrRtFvyTTKEqNxCOroSoPkVkf2UnRD3PU1bDoxctbYIgKxqkU0kovBYeTw9K5SoMFitCN66CV3FbDQUfJBKJa6TbboWomEzmvnQ2/ZFYlTje7IDVeRi5bAbpdAq8XkCv7wi0vIRSqawzmYXFTDpzj3TlVgvo8gYOdNhdnEqjxiFXFxKR+9ALbTj3yQSS4UVcC/6MsVOvwWhzIxlft5CkqW0ZKCvL89E6p6sYDzigVpnopvDYyGVhdfjQPzAEn9+Py8E5NCQ5UywWVklTY8KWQUOuVBIVcet7hfqHsgWzWoZeY8Dc9Stwe5yIRVdx5NhRqPiaoNbp8qQRmXCnBUJBrxPSCiW0mXuAal2G0+OG1+vC4sIf0JnNGBw+hUQsoqpLEpuRJnYb1Mql8rIKMg73D6DjkAcLt4L4+vzn6HBYEU+u4tbtmzho74rV6/XKE80eAyWbjsy7uzvnJi/9BJ7jKActdNZuPCoU0B8YhFgtIL+x/ivVslloZtD6jQxswqRYeCV+fOStl4rZSIjTa9zjb7zHlfM5FPOiLFWk23f/mr1IdewyNTPYP87svV2r1Q7Lsux88+zERC6fGZDrVbi7e8M/fvPFl7TPLtAycc807sY29ZhVFCWeSa2tPXdsNKAxWg/OTn17YVsUJ2l/iSg3K/8HLB+HRi+cHTlz7gqtPyS2s43d2N/CfjATO9FNLBLDxGZ4/wH4FwXmXligtIj3AAAAAElFTkSuQmCC",
    954:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIQugcniqAAADFElEQVQ4T+WT60uTURzHv8+z59nNnC5vpS7XMilHRpldrEjLiuhmV4NMoqKwC9mVCIrqRW+qlxH0ohfRhSzIsppUIiaaWBaazdlWy1Zzc85tumduz7ZnnYVJN+oP6AsfDufw/X055/zOwf8lZpifJBoe/6rsCemZ29evvVRx7Hg+Hww6DAbDAFlmkpLkif8KoIvy83PDLveN/etKCovKSmctWzxn8yh/b2x2sviiShm/mho2/lESCTJP7CvvLN64kmm5eheaFDEMHjfM1h5kalSw9PY108Pe36QE4hDCblpMM45+Kwq3boBXJMat+7XosjjRYXYKbTah6087EInF0Owo3abLzZmkMr3vEM+elwdbZyc6+0NIkbJ4VPUIxUsKMW/V0o5fA+RHDx4+VFVVue38ibNqTVYGZAlKHNhbDkePFUarB+VbiuG1WqHveAvl6Fj9j0egZqhVRXNzpp5punNLfa36NnSNdairq0Fe/lwMMhQCDIdFORk4dGQnpBSNVr35pzZK52unXFicOyeTcttQVlGBJ3cqcenKZbzqeotzZ07C2NSMoXcG6JtbQUWAT26vYySAZZFzcNee0w0P7rJp6ePQ+rwRU7InQiAOmZiFXBLGwukFqHxcD2OvC36fDzIROxJAswIkFos5ITk5cZrF7kHNywao1eORpkrFB3074mIk8JpscPn9sLmcsA16ObuXfxgNiN6DEAZCHDdop5jIitRxWTHyMAen24ssbS6kMjme6nQwO+2QsiLB4vKY+3yhm85AUCdasyB7naHb8YWEeP0hwW/vHzSxXN80zeQ8hZyR0/U196CI+Ejf7bx9gHv12txzvY/jq3khUk9q2ilVatK1zaWbusemyVwttc8SFb5wyYMXBqU7ELg9Jl5RMCk9Q9320fTyi9NTG45AT4qMhE8ENyEQfQfLC2ZOPyWN8No2k3EgFODbXX6qISQIr6UsqyQG7VAw2E58bwjRnUY/UojwTdGANIKWoeksQRB4AbCT+XvCZ4KMoCC4CP2EkcLvigZEiSHEEnhCgMARSKf/JeArmk5Bxs/191QAAAAASUVORK5CYII=",
    955:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIRQtenVfAAACr0lEQVQ4T+2TS0wTURiFTzvt0DJ9wJRCgZaClEdrwEAkJSAEiYqRxAgRxLg26sK9C2N059qViYkbNixMRDeKMWpUkJRA8FEeJbQCI7QdKKWPKbbQ8Q5WLVH3LjzJlzOT+5+Tm7l38F//gGQZ/5PkGZeUzvhvojK+T0UoYu4ODd6+cvnSabVWaXVPTAV2AIEs/bUoW7K62rrmV2OunbculzjjmRNv3rg+StOoIWvK7yO/lL0Dymw2lzhbWprDsUhlWZXtTJWtCgyjQ3vbEUs8Gq3/5H4/nkqlw2T25072CoxGo6a//+y18xcGHtodtr6SQlOb3lDMWC0VCIc2sRWJotZ+0LrKrVk8Hs8YiUQIopSVClRdp7runezquCqT7cpZllX6+QjDrfCwWkoh7iaxtLRMfBu95wYOOOy1zmg8ElheWl4l2RTV6jx8vNnZcEun1ynkcjmCQR4f3fOYn3FjazMIRqMDx3EYfjCINT9PdR4/UdbT09tbVVNpHHky4qY6jnXewU68ViQnGo3F8Xr0HQpMFqgpJfINRvg+L+Lli2dIpRJY5nzgVnzYCPEKu8PRRKtoE8WtcId0BXmtlEIJ39IqyirqUVRYjPw8PXSsDrbqSjQ2NUIhozA360ZKiGI9EMTzkafg10MCRZoTIT/fEI8LJq/XKyuvqMPGxhcser0QhCS+CtsIr/OQi2lMT0+JXt+KsB4MKIR4LD0zu3BfuolG8iUbNVpVdzKZMuhZtrjJ2X6U0WogRLZABhEO8ygs0GBsfNoViyQe5dAKs0wGNpZIDkkFElpCKYGRClW5ORdLTaZu1mCiJicnHqtzaF4Ut8XtJD6k03hDZnYzmdXsf+HHcx6hmtVp+mg1U+IPBIbJ+wJBCknnv0ZIEmjJswuylUsoJ+gJiwSesHdx9gv4Bvc3ChbsFYviAAAAAElFTkSuQmCC",
    935:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIQ+nH7yzAAACgklEQVQ4T9WSX0hTURzHv7vbnNe7v6yltqyQJmEhRg9FPYSBD700NSUiKoMeCgl6DPpD+OBDD/UWUQ/2YtRDidaDUSFlVtQw/+VsarbNOd24azov267Xrd+5DJkU4kMvfeHD5Zzz/X3vOb9z8P9Lm/tuVBrCRHCEwiY2KlZgrj16rOVZ1/MAdDhM4wJ1ZQPSNTefdz9o70h4xgLZl2/6FV7gL9H8JrbIktcTX9fQeKPp9Lknm0sqjKFwCINfBzhncWkRram16wU4L1643NV8tuW6wBcZBMEAC29AYkHUZBRZn/P8NYBzVbqq26629Zw6fqbWajOrJqu5EBk5hYb6BmQ1GhbAGvpHgL6mpqbxzu2778v3Htoz/PMHysu3oWq3C7sqtsKgy8BsskHO678u92XSX7vZ2uquc19JK3bsqxZgsfIo0OsRFWOY8M2j1LkdiwkOGeiyuZo1Oyh02OxHel/3Q1pOoYDOy3FaDA6N4YtnFEaTAeMBEbd63srxxV8x8qsh+QFGjtPvPHBwP6pcDhoqePfxE+bmRZjMVnR+C6P98xgi/olIMhEPkkFiRfkBOlBzTIU8Qv5pBP1+pDJZSIIRT30BePwx2C0OJOemRskbJtKsaE0Ty0pLtJGgF93d3Uim0hifX8LDDz4Mh5MQeB6GFQnf+14MkjVCqK1cEyDJS4qX/lbfdBL3BkT0BpeznFarVO5wyOnJEXGmv7MvFokNkZX1QJV6lzmV3e945NGaLbbHr4bjfu/ItDjj8y7NTs2uSJKoKHKCPFHCS0wS6g7yA+x2h+MEzW5ZiEZDNGbbZGeN58gQLISdffUl5Aew11VMCMQiwbqcIpaJ1Xv/xwJ+A3Of5i4zNQNcAAAAAElFTkSuQmCC",
    943:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfbAxAWIRAqF7FGAAAABmJLR0QA/wD/AP+gvaeTAAADBUlEQVQ4y6WUTY7cRACFP1e5bJftcf9lkklIJiLKAqFILJAicQJuwAm4BwdC3IANEms4AKOAQjRiMj3dHrfb5SqXq9iMBBpmxyc96UlPb/vBP2RAci/3+c+eALx9vf789cvld49X9e+jF+bi/baPaXIhs+zDus7CH++vVJVmazPz6ZuXm822O0opxdX3P737IQXkel19vWn0N4ejYb1a8Nn5EplGzs7W2Gnk1aMMJjh6TxICT5eKi6vjz8AvAlBFxpe9seQqwY0DSTLT6JLt9Y7+dmCaPAfTY4db6rIEZmolbgEjgLLW+itnLboo2Xd7YrQYO6JzzXKxICQJUpeUVc3ETFHmXLZ2AFz6bHNy6uzheaUlKpOcP32BCYZSKLb7Fm1LsrSgP46M00RqZ5yP/Hnd/wY48eJR82azXGSZ0nSHniRNWVVrpghZpnDWMU2BeerJtSQrcqqy5DDON0CXrprs7ThFmlID4PxEjIHucGS5WDDPASEk0FA3Gm89UiqiDxOAqMv0i6oomAOQJBhjsT6QFxXOB0Y3oYqUullAzCARWGupS50DCBviR6kkxk0kIsc6z4zEzTNtP7BYnnK9+4vgR0LIkaogy2tOl+UrQInuMFx23UBTlRBHnqwbTHdJiueTJxv6w45Gr7GTp9ae6C15oTh/vjwD6rTW2hZ5wXbXAjMQiUmJnWb2XQsh4lygWTT0g2F0DpWOLLVcAUrsO3s8DiN5rlktN+zbA4OZWC1XOBvJ8pzV+oTbvkcIiZQSN3ti8I+BWty0wztjDPMcuO0OZCqn1prrm4G2Hdnteuw4kQDd0BOIzHMgibECCtGb6YOUAjMY5llifMr11mC9YLQeZyPdrSUN0A2Ww3CkLjWrSimgTI9Bmm0X21Wd69lF3DRS5DrZt4fEO/A+iClEkYgpqXWBNYb9bk8/2FKCSNu2/fjjr+23wDMhSAAhEIJUyFQg80RWWSZPMiVSKRKRKaWqqiilyKv5zgcpsPiXUO5TA+puk3edu9/1Q4eHLPQQGeD4v/wNVhh/ypMtp9wAAAAASUVORK5CYII=",
    942:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIRVafUXJAAADEUlEQVQ4T92T204TURSG1xw7PVCm9EChHESxgIBRQmI4KBETTTB664VeGXkGX8AYr43PoHeQqInGBAjRRKMxKh4QRYQepLTQTmdKO8dd165A0BgfwD/5svfOrP+fmbX3hv9TQhjAhyP7a/lvcTvjns50BU95A+6RdL6yhksboTVV+uxv+jNA6gy7blwZjVz1cMxAW0C83NvkHVzaqLzDZ84Ov2l/ADsWD5wY7wtdl0Q+GvS6e2S3EE8pesl2GI5hWL9uOTrWUegX1b5qf4Dv2lj7dCzk7tgqGrBdtqCALKyqpZGu8HhEdh0Pe7i4x8W2uBhgNZMo6DF3A7jJk82XsHBSMywmFvJA18EIJDaKm+N90dD5odYIxwktPSF+cPiQPJHM6/VJxXyBvsJup+XWEH9rQ1WY7jYf1Hl4MLZV6GyUQgPxYF0ii/OIxBzrizFF3bZNi3Sgpx5haQAz0R8cxXk0Hg3Cas6GtYQCBdWABr8IC2s5aJQlbJ8OGQzy1nucpGY/Rp+J1PZa7G33DQ8cCoKFi4+reWhsrIN1RQORr4KbByDYfJfIgF3W4Mmr1OJG0XiDpWmEsPi7DYbDXJh6mUqtbWpw+ngrtDSH4dxQGywnCnAsHgafRwCjbMKHpJZ7uly8j8YvSBEBzstzZ7/8KLXwDHPkaIcsOrYFW5oOtmlDLBqA72kNXn/KgmVaYBLR2izZiYxqzqKX7gJwboEb8wuslC9ZapOflzfzmrf3YBhW09vwNVWCTKECF08eAMktkJsPVu5+Xi/Po+8botUCKjap5nUnrdugd8viyNGYj3v4NptSSts+iSeszwVq/+Gg696z9OLs+8IUqVbn0JdBCA2gTVxCnnsEZkWxSeH2/PojXTUCb1a05YoJP+7MZKZnXueNLYUVHCD0rfTf6R2piR4kuh1mxa46Jqn6l3OVrxWTbOU0kppdUubyZedFX6yuaX4x+zarmc+wdveS1cTsjFT0YMQQemEaEBEpI7mYLI2uqzpLCNDmpZA97Q+goiZ6HOi4K3ppmhE8EZBEDGRHAD8BSY5KjTLZZOkAAAAASUVORK5CYII=",
    6533:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIRlTywniAAACIklEQVQ4T2MYGYAFSpMOZHTVdfX9HXuBTEGICCZggtLYAKO0rqwFjyhXvm6oQxSQzwkRRgXMUJrBLtVT1zjCNeEfFyfP25uPnoHE1N2M87kEefSZmBidX999tv3P91+vgML/QHIwADZAXE+PW1xXaquUglzMP3aWSFF1dWEJXaUfjKz/cv78+SPw//sfljf3nh/4+eX7TaDyPyA9MAD2wsdXj0QYmBkVnj15wsDPz8PMys6cpWytv+vzty/y3379YmAXEGTgEuRVAiplBalHBmADfrz48PHT03frGFgYGf7++8GgoC3C8PfHdwaW/2wMn56/ZXj76gUDlwSPDFAphgGwMPjzl/H/FzFbnWgWDj7GP19/MXz58JLB3NuJgZ2NheHT53cMvILiP56evbkFqPYjRAsEwGLhz6sL969wf/x9+vu71wzvHr5g+PP2G0OWZQiDorIqg5C4BAM7B4c8UB0oOlHSBXI0vvt358NidyPbLwZGpgzhAREM779/YtCSVWEQ4uJj+PDgxU+gGpBmRrBqKEDmgAwT5+HhsZLWVLJm42FVEFOTYvGPifBl+MPIsGPzzuPb+hamANXcAGKUqEQGIEP4gVgBiLWA2MGnKvbplCOr/muZ6rcC+bJAjALgCQkK/gMxyKkfgPgdEL/+y8r0+9nXd5KnV+2eD+SD0sEvICYaMLLz8Slz8nMGANkgVyGHGdGADYgFgBgjDQwGwMAAAEwPoYam/5xmAAAAAElFTkSuQmCC",
    942:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIR7Nr5xBAAACyUlEQVQ4T9VUS47cNhB9JEWR7Ja6e2Z6jABeJ0C8yAmy8glygCxzmNzCx/DOWSTI2l4bSBbOwvHM9Ed/khLlp/Y4CIxcIAU8sVpiFV/VKzb+/yYe1+xx/dJmYvrk/rctCbY/fv/s5/3G3Yahw/3pw9h1qQ8pP2+cvvejeLgudA8oDLFFgsb7Y1f/+ufdK8YehQOe/vT82zdFNt/MIWCSGWKKCOMEt3LwfkSKCWmWkIkJdAGfxPsXv7/9gQleS6P1tUiTmaYRq3UOIwbscoOntzvsyxV2JkNpFQoroFYFxtgz4aAYfENAZhrZGIIRLNcaDWs1rgqLuT9Bixn72z2cs5D8ro2Fs46evMReHiutRbktFFJC3dS42lzRHbDdlMDo0VYHBgrYtYNWGeq6wcPhGBk7XBJoHYUSQhproZTFqfHww4SmmzAMEVIIpHFGEz2qwx022zX74NjUT+pIlxd5tlAvS0gmmZ1Btrbs+ICMNSepSZkMhIHb7BhiKO5c00nELPvoNxkb0ZLaKrew3HyuK2RaUgkyVRJtGNF5TyVm9EOLIfiGwRURqIL6qq34myedqorBDUIcEfrEdcLxVCNSXp27y2qsgXVm6cEyZJClzvZjEmjbFn+9e8cTPEzGzTJHYpVD3+Fwf2Q/OCNzumDhTgvLQ1JzJ0kt+A43T25YFBtG6j2nsmsrKjKhfLKH0Bl9CU9257b9F4NdiXzR/nrPcg1i07F+zidZaDZxvd1BCEUpcyhO6NQRUS0qXEzmcmnWxBloUbH+JDS63mNa3vWBagiEpYksRTqH5cB6GNvHeKhrp589HE/fnOq+jkk0d13fUP4+xDgczu147gaOGG+dykWKE4dixtsP9S/HIf7G16flNn5NfEeQ9z+miZyzqjiwjtfIkihdybmalY/TH0z6knvulgTL5oL4/N/wpW2I5fIs9nmPJ/4GED4CU9NlvfxVEwgAAAAASUVORK5CYII=",
    922:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWISAMzoHqAAADfElEQVQ4T8WTS28bVRTH/3Pn/bLjx/iRkNTBpFEVtWmAEFUsQCphURZISAghVlV3fADEN6AL2PANkFghJDasWCBakqqVQICsJE0drCZOmrjx2B577PGMZzwcQxOJRcWSv/Sbc0f33HvPPedc/O/in9nn6b/mn+sgEqn52eInna67Vy6X31xZWVvt9ruW1+/bNBf87UXintlzFYvFrKkq34yZn+Ni4aIoqnVzKp1fWFzSW53TePPnn245Ledbcu1N/M8jSCaTKU3TrCjy31dV9rGRyOQSZoq3e62UKEuS023C93wuaWgLPBebsiCpg+GwcRaBsnxl8YsrV1+7OaUnFU4SuI3Ne/C8AR3B4DpNXCi9iHEc4rh+QGFzEDjBa9idj3hVVaf1pH51plh8o9vtLB+cNDiyeFyrgRclyLKM4dBD4EcIohFGQQjGGATG+83T5j2WMtXbCd34zhsGqxyTKSs8Gk8bmLtQwo0b70CRBSiqAkES6FwGSdUhCBI6Pfe+H4Y11rCdr3RB3GIQS4OBj37PQTo5hXK5hN3dbXi+h8WLl8GxEIqkIGXqiONw0Go7P9DVqyyKokp1v/7ZUX3/QcJQsf72OkImouc4iKMQIuORzaRx+vQYEi9A0wyoiqmapjmmDbqMPqeGYXhWITv/5LiOjbt3EQQBNjbv0EkxXr92HTPFOah6CvMvLSKgxLpu2x0MXMrwP2VMrK6u3NZU7ZXZUgkN2sTptHF5+VVk03nYto3K1q8wkwnk8tNod2xQNoK2072Tz2RFfmlh4YP5cvlTy8qjtlcF4jFMw4BVmIU36OPgoAbHtaHrGkb+CK1mA5lMVk4nzbcMWSmwmUL23SjwqDw+deEcOt0hJEXFyOvhsL4DUxNhpYsIqZQjupqsSBBFhjDwaw/+qHzPmq1mdZKcdquJnuuAcSIOqQf+fLQLLtbhOEPkrDQ0kcfKyjWwKMbezsNHv1d2v6br3+fbvcFwOp96j0qsWNkcWOjBG4egdsXy0iWIkjhuHJ9s2R1nJ6HLpeHA6/9W2fkyHI8nZXw4aeXptZcvfV7IFz98XD/aPjqsb1OcAhfGwigKrDAcVV032BRF0XlhJrd+9KSxHwThj7TuF8KbbCApirKmq/J1u+2c0D9lEiExkUE4RJ1wiQIRExO/9mR89phShEV4xCkxcTrTZHz+/v8t4C96JHZiGIxMwgAAAABJRU5ErkJggg==",
    923:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWISLiwODGAAACvUlEQVQ4T5WUXU/TYBTHz15wL7CxQegCAQwTkAGCiFNYBAkGiCFecu2FiV6oidd+BYwxfgHvQKKRcCEGCS9qQAkMZggMkLfNja2ysa3d6Np1raeyCSYY6z/5pel5zvn36XlOC6dIkUGWVJmrJG1PR3OvJT/vVoFRU4cOTJzhkhgXMpyq7JNUvZ31jx7e63ty4COhprQYyHCMnZlbWF927wyNfA0OAct6MS91lH6s7A5015pK7laUEQ2OK7XAcGkoLbaoHZfOW67WWW5YiTNtzmVyieH5A8z9w0SZuULr9cu6tpuNwGl4IGxWoGgavOQ+KPR6uH3/QdPTZ3eGtVptM6bqjyqOlN1BjmvJXTMwOG73etaUCnZfae+shrNVFkj4vLD9ZRxaWlvyGhvP9YxOLEzxvPADa371JWugoBI8GTpg15dWIyujk9vewaFps1lMGCutuVBIaMC/sQmO7i4DQ8cKZ51bn7CGlgqzBmkkinhAFN08zy9GaHZ+as7DMtF4Sau9RJ+XawDKvwt2R3vlyHunM0YldjA/dfIYJZM4IjUqCCL4WC7tXtsI+wmT9kJHl81ARZIQPVSrDjkxPe/69hHz6JMGJyUi0gyEWEH0uFbDofYmoqesqlwZj4lgNhiLht5+HsP1wO9T+It4ZI+kmLH+F4sDSpMJhFQUqi5WWMxGXQOu5f7LQJLU7e8Ts/5X+2RSoJgUmNQc6PSqWozr5RhIStIMs/Jhcnkv36ADjmOllzRhXNYOsqJ2dgOuJMNAWlRDihOkZh9PogyxgVA8mGCS4A3G2AjNbWEs9j8GUG8ttgnaAng37drEWfFgiJFtUGQ0EhaisDmSUKRevp6RjlAapEO5BqrudlufqNZp+p+/GfaT0SmM+RFB7p9Hby0vehwIR3OYRMqJ99K3EEREuQYapBrRIj6ERHA+AH4CFvYqQxkfL8gAAAAASUVORK5CYII=",
    931:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWISQLo0XzAAAC+UlEQVQ4T9WTT0zTYBjGn3bdP7bBxgQBFaKRBJGYKCb+OXD1ZCLqwYOeSNSLVw9GDxw8eDfeSDhIjEGURE8mGo3xT4wKIsyBIJsMN7ZubSnt2rXr59shiSF48eaT/Pq1+d7n65u834P/X9zv9U/xjUD43MDA8aO9ve3ecINnKbesDA8PJ0hztF8mWK1yC3mPtDSdHr8/umhZFtMzGeboGnMch2WzWWtwcPA21ewihFr1JtWd3dl65e7AOabMzTNm24xVq+vYFmOSzBgt16/deEW1ewiPa6o9SN5jIe7Gyf7TN4+dOsOp6Z8wsxn4w2FwHAc+EAQTvKiICrq7utp/fJ8rJL7NT5HP2DggtK+t9VZ3z4EWe62Moxcvw+P3Q1spwjSrcHgfbE2DUBcAfcEfDO0YG3/0lHwF3nUHgKihqru3d+7HGvPj7cg9vBx5gNVADCUNWP6WxeLEFySfvwYsIOIN741HowfIWud2wMWDQteOgPdSJBblF6c+oL3vPISOdizPzsDmghBXcijJJnRFxMPRx/g0PcnLZUnK58U3tQ6Y4wk3d3bxC6kMtnUfRiqXxFI6DdnmkFpOIa+ryBsKUhUBd8afINTWgaJkxskarnXAeD7iVdULjQ0hXygeh1J2YBkyTMuELJegKjJkpYipRAKTM1PIFwrkMmflUvGF2wHTLSuvWJV3qI8hmZjGmlmGZlZQUmXkJREFMY9VScJ8OotYQwMikUa7VBRnyGtuTMHRada27ZyItu4RjKUFqL4A9IoFw9Chr0rUhYofKyJNRXFH+z6TTo6Rb2bjgKrFoBimEato0kE+WA+jlINRMWEaJkRqWZaLdH8dhIOBhc8Tr4bI85bI/ZkFP9HT3NR61ecL9HMOvDzngSAIUNYk8LynCthJsSQO0dV+RrWzhLk5THXE/kgo0kfmQ4LPt6tc1jiKnMRx/FdNU5O0/5FwQ2UQW6aR7hW2EU2EOyq3hv4OkVghJKJC1LTVARtyJ+Rbf63F1zX9Ncb/KOAXxb1uWVle6tsAAAAASUVORK5CYII=",
    932:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWISV8pHVlAAACcElEQVQ4T42SS2sTURTHz7wniZO2k6ZJah9JmlY0+KRi66KgIPgJXIp+A5d+AFdCVtmI4MaFGxc+QIsLEYW6EKpSFUJNpYTW2NJMmswjmUlmxnM7JTRP+oM/d3L/Z/65c+5h4HjQKN57BPdw7QuFElF+IkEQEvfuXsvcvBx+ib+nUSSsBXu4tjgbH59bOh17xYUjfEUpi5MxOTg7KQU+fPxeZRgmbdv2DpbVveqONILrNuVbt++cur6QTly9kIpZSjHw6Mk7KFUaVXy56/hdAX+VmiMlZ2A8lYBzV+ZhLCpDvWlB9ARjo+2gyNqiK0BVVU1V9LIYnAJdKYAcpEESaJiNj0j4CaQ/RC26bgH/gopE5cXFhUtJhvPDUCgMVFOBGuXz/dgordh2M4dlplfd4wSIVtqr5JxGHXxBGfyjE3AyGYeJ6Ag4TjONvuSVefQKYGam4/MuOkZNB4blYUgOAUvZwLHsGPqcV+bRK8B9kMlmDbNR58QQaPtlDIiAaZYh6OcC6Lddfa8AQ9f1zw8zT98EAgHgpBFgxWFsroXdc9oaSOgVQK6q+OL128c/176aYOngGlWgbR72NUtBr20WegUQTMMw1lmBX3fNKmzl18BheBfH6Bd6rSkk9AsgKDXdUKqaBTzPw45qKpbV3MJ9zbM9BgW4rC9omzh3nCjC+9X8Nn7dP9zXPdtjUADUDdPa/FOE/GbB3tvVlnGriBo8ykegRN6c0rdXIfts5ZPtul9wD09x0OQWfQPC4eEE3SjP5SrC78Ku9hy3vqHUA/MYkOAzN5bOL7M03MfniyiBGJ10DcYRRlEpFGnaBspAdQDwHyCZ3F4cjsQ1AAAAAElFTkSuQmCC",
    945:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWISeSqhRJAAAC1UlEQVQ4T41US08TYRQ9M50+qZS+EGwrkJT6QGUh0WAU2cBGoyvcujDRlQt/gIkLw9oY3fkT/Ae6FVMeVRB5KK9axLbUdtppO9POyzt9hXc8ycmdzD339N77fR0cANOI/w1TIxpwPJ+cfAoZCudod+cyKZHeyfXU8WgZOFyugfCF8++vDF19zNqtj3Z3kluRgcFK8vevEqWVuuowmgasx++/zdisE2VdRl+gh4tELt65PjL6JDY9NSuJYpw0R5qwjcjoOsv5PKfB53KoFAVEY9OcqMiW8bv3H1DeW5cdRtMADrvrjAoNLmcbvn2dRylfgMVhg8ffGaG0j3jkgpsGVscp8w2v24VXL16CL6Shq1Vsrv1AJrsboryTeKKBszsYGPH5/JhbWYKqMdBUGdlsFmK16qJ8B9FaUx5AzSDYF+z1eN2nfm7G8frtG5TLEhSJDJIpVETRZLbZ3DX1ETAMmNR2qry5kZASGwu4dXMYo2NjcHcGkNtJgGNZk9ViMUY4tgNdluVsb9/ZjYmJhxAEGal4HBJTqZ2b1dFuMputxhgWo+AgmjsQ0rupaGxpGYnkXyyvLgMVGYPXhvF9LsqIpZJRzBGb+haaF4mpKqqXM3P3bDY7SkUeNqsZ4XAYi1/m0OH29IdCoXA6lZwlbaFeUkfrKhd5XrG12YdzmWSXxcKhqztA7/JkJtDvMu0mk/kyn81/VFV5m+StW9k00ImqBp3xdXaOa9SpouiQ6TiNpgN9/XB6vMzWyuIHTdPWSCvVqgh7Z+KVkvhJkfSqKpYhlARUyF8oF+Hu7QHD6aDrbm9oW9hroAiCsL26EHuWSWWm+GRaZLUqfMEe9FwaQp4vritKJUc6o9sWWjtoQFJV9U+xUJiXxPImbb9fVZS29diMsBSdekfPn0lj7ECrqQnHfYGMVgPEAZZlz1HUafYZijHivlM46RNmjNdONP4HxnOGuK8YAP4BtpQnpzLHN0oAAAAASUVORK5CYII=",
    936:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWISl1EjlOAAAC2UlEQVQ4T6VUSWsUQRh91cv0kpmMk8VINMYoCWgiSMBggsaNnBI8CoIH9eDJgzfxIAguBxEPOQWXPyB4EYJCokTMRT2o4BInDGZ1JvtsmaWnqtqvZ4JmIorig9fb917V+7qrC/8Lde38OyhEVrr8R4SAYG93R//tm9cH6HY70Rvsr2HVB/z9Jzpa3dfPhkVDXd0lerapVCrHxhYUwzCOVtv2tRpDO1sbqmGVgSBr3tNqj4yOPqf6MtEtKtewcQBj5/b6qwFVO5VzCqzSsmE4HFWWXWX4K0KT0ehbzvkq6WRJ/mtfpsJFCE4eQX8Q8/EEYvFFHOjprng0OHim98jxq6SpLUlLKEtgWVaNcJwblsos6c2hakguxCCWYsimMmjaUt/8eHjoKZViVBWeZ30CxVDcw37DFxJcYH/bXnS0t+PU+QvI+aowHg5jci5aYWpKN2ntkqU8gerXzT5NuseYVDAW+YJEIoX3r16hs7MLDs118vQ5vHk5oscWFoZo+gR53LJ3YJq+pGboyAuGLAzMLcUxl0zhzv27GItO4VBXO5zE0kFdQw/JA55nfQKW5TynKmqfK2WlVnAR0Okr6Ap2VFVjbOwjLNPCbCqdzxTEE+G6YfJk1icQfp+voEgZ8ukuqs0KWJqFtOOgtrERIduCU+BQVT2cl3KW9GnPVPYSs9lsa9CyzX1bt0DTGNI8jabmFjS0NOPilcvY3bgLLmMfSDtFzBdN3mENLCflu+lE/N7Uck7GxSpShRSmZ75iYnoSlfXbIFUGxhAl7QqxuJjKWiB+yzjOg3B8+ZbQfLna4GbYion3b14D0Xl8Ho9EFpPJT6TLFB2EjUvZIa5wwSc53EhB8DaVsaBKf/SLkefjkUR8gEs5ShovRXEhbRzAAycmuBAzUvDxVV4wN9m+ifBy/CGZn1HtC7HYv4c/bRZee3XEBqJFnCNOEHPEH/ib3UYneoN5yYqxfwL4Dqx/Fb6A2nB4AAAAAElFTkSuQmCC",
    951:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfbAxAWIS7rdqztAAAABmJLR0QA/wD/AP+gvaeTAAADdElEQVQYGYXBPW8cRQCA4Xdn9273Pn1nn89HEmGBgoMlKIgSIcARoYFQUSGlo6CloKTkF/AfaOio0lAgISABCSUiQsEmcRLHxLF9vjvf137NzM4MhZEMBeJ5+B8e4AOC/+Dzbx4ggKDbrS1/+O7l6x99cOWzRr3W3ny0FwMFYDjhAc7jb6ury71rl9c/vrh+biVJs7VWq/16r91spdLSboU2nc3y/ljulwL3zc7BqNjZm2x9eePm1wFQ3rh0/o33N177/L03X7l6cNDn6WHGynKDZDLisD/CNz3x+/ZO9dULL53Xxnzy9sWXubZRdQ92D5pi/cXulS8+vf5doxZenaYS3/PIc4stLOUwYvVMj+37j6hXFnjy+CG93gpSa6x13tmVxbfEeJpPD0bHuctS1HzEeD7D4OOU43ia4TyPtQsvEIagRJXhaIQvHFZLtLJWHI5m/b1n/f1MajJlsMaitSPPEsq+zzRWHI5irHU0Gk0K7fBFgDEFu/v9RADZ/nB6z1pLoQ2NsILneQjPQ8oCrQtatQqRL2g3qqRJRqEtuoDCFJkA4jt/7H3frIVMJwmzRJIrTVEYSsKhlOLoeIY0sPlgl3q9QiIV4zhj++lgIAB987cnt8eTWFaiEN/l+DhKwpDGCTLLsRbCsEGtUsY4B8IRoDHOPROAieP8yUTZLQNkBSy2OkStJebKp3A+i606hec4d/Y55rmmHJSYpKqwllRwYprLYqtUDun2ztCo13FW0VqIqNWqTGJJOSgxnKb0Oh2W2i0qUc1grRac0D/dffyzMpYoCugtLyM1tNsLOGtpN6rowtBuV5EyJ8syPCgQOMEJ9ev9P28PxjOV5ynaWoJSxHgSo03BZDZnMJ4SeAZnNZ61xFmaWIsWnDDAXib1rVxqypHjqN9HK4kQUApDep0mw+GM/uAY5xTz+SQG5gGnJrNEbfu+eMekQxaadVY6C+RKEwQhDx/1iWNJs1klzQz9YToH0oBTOsmyI4HFcwG9bgMLRFGEc4619VXm0yq+CCm5glzlOWAEp4qd/cFUK8n+aEScS0whsYXG9wQCTb1WQ3iQphlpqhIgCfiHH+5sb3YXontLnU73xo9b/Vt37+9Vw1AuthdLzXpQXXv+TFlJVa+VRemrb+/+AqQepzygC1wCukAKDIGcE1XAA0KgAuwCm38BMQ7vzfSoN4wAAAAASUVORK5CYII=",
    952:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIS+ccZx7AAAC+ElEQVQ4T8WTW0gUURjH/zvXXV2dvZit4VqSlxItTSvKksLKCIoiKUJ6kXqphx4qgt6ql4h6KHozQiuQoJsRBSUlGl0wIctkd71kFy+b697c3ZmdnZ3prG5gqEG99Icf53DOd/5nvu98g/8uOjnOpcSeYXoKNTnO0nwGzIn6rceOHKi+VV5SID1/3fOFrIkEbWp3huYz0Acjsn3lspxd26tW127fWFHu6B92jXl8PrIXmw6Z1nwGqs1qstqEzN3uMb8Rmpx7aN/m/cuXLNY7Bz73+0OSnIzTdMnJb8rOzrbcvnC8w8BzRROBSTj6BsEyMqwmMyRFGvd6A0M0hY7HL3vb5zJgbpw/emZdWdnpYCgIt3sMvFGAb8IHh/MbJsMRBAhZtnSMjU/OSoE5dWhPVWGO7aTFqs8IhYNQlSh4joYcDaK4KA8sy4JmaLgG3fB6QqBX5OYWrC3OK3N+HfE0nauvPbiz+r7ZqM+QYpPgDGmAjoY/6EFWpg2iKBIDChkLrMhetBBev99N126rusgyfN22ypLSvVsqDhu5uDDqHgVH66HG4mAoDSaTgGBEhBiOguF4WEyZiMbk6OWbLU00Revomqr1dRybsoHECAxFg6VkKOTTI5EAeJZDwOuDTo2DZ5gpM51OU680trR09gzco4fdnsjbjz2uTWtKl4bD4kIlHkeqQUVYUmAW0hAnrRMIBJDCceTNWHAk/+ZHLz5df9DeSGr2JlHEkCjJo61vuhxFefZ0RaHy3/cM6b6PB5GZYUJEjJKKZ+HHxA9QjAEdXa6Bsw0Pr2ma9pKcHUwYJNozQhYmXr3vdaQb9bFVhfmFqWk5vLPvO+x2M0RJhFGwaA1329suNT1qVjXtBTnjJMRmPmOi1329g9/6nnV2fzCnsSjMt9vSU1L0FoHBnafvuq42P2sktz0ncX0EKXForkZiCRbCEp5ni3ZUltbQlCo8bOt+IitKK1l3ERTClOZs5aQYgomwmCAQRgi//sq/UiJNPeFPl/2rgJ/evyip8S93PgAAAABJRU5ErkJggg==",
    937:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWITFmfqEYAAACuUlEQVQ4T9VTS0wTURQ9M53pj5kWKS1QCkmhyAKUVE2VxGiIgUQTgRV+UBNJjIkJe2P87XTh0hW4MsaEAAvUxN/CT0gQE/kYogGEAgWKhdIflM60M+ObFioSo1s9yZn35t577nv3vfvwX0FDSGemP6Ea/wb6yslz5e1Vx26YJItjZnUyLAAbxJ7KuP8M9lLz2eNDD94sCjWdyuLlGeXhqc5otaOylfhy1QBK/eyA7vDug5VCMuIpMRQ47zTcvFo4skIzsxMIV9VBKbLjU2BgqamvtZHEjvySoKxsr62tvuXenmX+jH/yLUNFQ9DFRXBULqicPHgsddiwlUDQ65NHnjZdCCVDT7KHYrU6XB3XO140ek6cL+DtzAGlEG5LKcoVAzhJhkhOaxh+yIpEtk2zvIGvIDLDVgKm7Wjzabe7xu2w22GyFREPi9TSPPRmHfQGO0rNLnR968J3gwLKyEkmrUnV0kxGD63HYnFRgh8MT1bUJBDXGYCYjLWkBiJJQks0LrJO9A51KH5JeDm2MvaZ6FLZEgpa6nV0US5YnRb50Qg0qTj8LIUEuemYIOALtY45537MrAxOdfue9xLJIGEkm+DurWsD4vgU5K5eKJMTiAS84DbiCOc7sOSsQHGeC05jMUr4/BgJHydcJpS3Gkn2zs2K7Meh5n2+GLfGaxGZnoKUiEPhrDCScmyUFmHvs/X7C/2PQsAHolETZFtTSgLz0WDkVazYgWSOFkJSSLcaF1pEXtCH6Nw7od33+vE00E/MC4SKKtzeyqlhrCZssqahOsUZU8E1iCQJy8iIISjdDrzv+SoJfSROrT2cVhBsbyR17qBpurbQZDxUS1md5SJfystSTo/kHRkV493Er66erp0wjZ2trF6rmdCyOe7aHCOEo4QBwvTWt/C7t6BCtavUp/8yosTm+E8B+AFHHvjWNtGTPwAAAABJRU5ErkJggg==",
    938:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWITL/d/CiAAACvElEQVQ4T+2TW0gUURzGv73Mrntz3couKoohhSsUGdtFo6AHITKiEgpBjJ6DHnrywZ56rAikt7LLi1AvmaYUoZSFhLfFbDNzXdddd9dmr87szq6zM6cz6kSZvfXYB785c5j/9w3nf87Bf0G3Pm6UhmKiWClkfS5T/tBmATpHec3RHbUNwwV6/fUq56F6i6OkQhLSoVwuk6HfpbWyzaUrPdHScunhJP94NETmllKkrfcbae/3k84+d7L56o1nDCw1tM6wVv67dKXWM+cbbw3nHgR4kpRkMhIXyeW7E8TV1EVartwmg55FsneP6zMD5gCtZ1ZNyoNK43A46yrPtj4vMlcYm0+XwZuU8LSXxeyrCYiaOCIfXmDazWJfbXmxe3wsIRFxjPoENcB4su1Je7nrsGt7tRlJvYzujlmEBj5B8r1BzkR7+D0IjbUaohDDnG9Gm5fSg9THatf8tHE23mG3cpBjs5gfGEJysA+5wDvkxTSYaTcEO4PlOgu8/gAKbYZy6rFTGDUAnJHRR9kYRu/cA8fFYdkdQYLzQDYwMGytQnHpQdh9PEQuAWOBI0ctRor2Z0DWz8oz97sh8Vq87+jE9EwUjGkLoskpLIT7kfSNgMSj0NDV5EU+SC0CRVJ7wKQm/YzNYDqulbMmcWUF5m0VsNud0HASMrKE/Tc7oLPowc17kUwEX2aE5bfUx6oBUmZlKcGlQ2EC4szLqSIDL0LidDhyrB6nLjTBm5XAxjhEPeOZyOJEFyHyOPWl1SUoxzSQFuI9C0tT12I8+2hZEthC8y7J4wnjXGstsoYcissMJOYfey3L+a+0PqUYlTP+q5S50t1KrVZbbTOWOHV6W2XjxYaayUjU6vs4NMqxwR4ZsrKFYQrZGKBKWZoSVLTOToqFovz1CyVEWb0TfwtQpX5Xtkx5V26msoXK+C8E/ABKkC3fM/7R7QAAAABJRU5ErkJggg==",
    956:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWITVhE2UBAAAC2UlEQVQ4T42TS08TURTH73SmM32BlEctD2uhCCUmmEB4JS6IuiCEhSbGDerGRL+DWz+BCxPjyqVrIgsTdWkUo0ZJoVCF8iq1tPY1j86dO3M9M6UyLdX4S07umXP+/ffe3HPRf8COLyx0wuqBYKyKDcfxyg7fezCLvN6AmVdL1sq5wuE+fXT8s+vcuTH4dlsdGzUDgbLMtZ6biw8h74JwXFpcnHN6vVGM8Wxybb0TZzJDUP+rgbb57OmSrmnzvgvRGfg+g3j+imEYUcNgXDLDVgxC8lBXLLWNPwYQ2/nXy08CUxOPIA8XdvcH/ef7R+AkMmKcBOk6gbpuiu3UDExysM1XpdWY7p+Yup5OrCm41dfvcBAfZygS9OWqrB67gQGRzu3uveSHhm+wgifLDUQiiHe1UIYWoKdaqgbsBiYixfIbOZvrJaWSw8Ckg3Wywdaz3aZ5BQJbKhuNBgRJ0o5eLivujoCf9/p8pFAw3F7PABKEDujzVdkJjQYmRRKPrXaPTk4FgyHCKEpeSqfa+JGL49DzVSUnNDOQMWLfp36lQ8SgxND1cilVQjQyOg89cyLraGYAp1U+qQQzklqBa2NVbOAyIUoUsWwvdOuO0WjgDMzN3WZ53sG0tFawDuMBA80yVEX5XFboDcFc1E/jqR2I8U21ffryfSEQoNbTgXH0hQYpc3iwIUzOXIWK3xIe02igy8mtd6VEAruR7nUSrCFNU5jtLZWm9jYIw0RA0w5Re3CnDMz7Tqk7m4+PlpY/ZpRKFxiIBbEYR5xQQWVRQh6P/cWeJDY02HaeVuSfQk/wljsycKTtJL9QQWhDorjHj00Ok0R8BXTWaDe/BYTK8Hg+qLFvL7wjY3eMXLaAVFzQfqy/RZSZRhwXBo315812UEMxJDnHBEJ3nX2hkPZ15TmidMuQJMXBcU6qyEnQ4H8Z6HAUjPeTB6RYxKhciEHtOxWLh/DjDORFhJD2G5yiO2U+S+NlAAAAAElFTkSuQmCC",
    949:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWITePHQQtAAADbElEQVQ4T+VTS28bVRg9npmMZ/xK7PGYpElaO06wU7cueZW0bkvaqiqhakFFSCy6YINEUhalPCSgCxBhA+xhUbFDUREqi5KWtpRFlKaVqgSSOJGJ7ThN0zwdP8bxazy2uZMYKZSfwJHOvXe++c6Ze7/5Lv4/oHvf7D1hEk1Osma2Q9ugKvOzqKpQhZpT7Wrff83ltl8ka8tWtIL/GDg9zsavvv3057aOtivksaHFZb9ssdYMJJcTXHh20UZiRkJWzVXxrAHV0d501vac5UxKSnoZhmkc+GbgdatN7Bt/OGbQcdpq0Wa9qtfr+0mueUugDjvAOZt3v3p98BcsLa9E3ug7+/XtO78efLv/LXBaFqLNfEqW8wez2ayq41TBvww4jhOqWO2Jx3NP5drdQpuspH0/DV5fmPbPBN559wJ8Rzu0OiMX5nl2haTnVM1OA6r3XPcrciHPxBNZqrZBPDbzKIxirjw8fG+0ODryABNTfuhM/L6Xz538nOSr9WBUA7az09NIZuseu+O1zZQCQTQzgtlAfXSpDzUW/oLJxHjy+QxoWoPOrr0aKZUw0zTsREPTHk/zyZ5Tvgfvvd9/aD0eOz427qe6D70Aj2sPeE4LuaBo6upFTE/PIp9NQ6fTQymW2dWnG3dluRCkawSzb3FloWc2FNpbJsc47HsRa+vr8E9MorauDjdu/IZgMIJd9TYc8LYikZKRzSiUo9lOhf+KjFDBQPj3kP/Jx2wVGz1//jRiGxtAqQy324ml1TWItRYYjDyOHOlCJLyAXFqCIAilkXujfnIETq1B7JMvLrV+9uUHwtCtIVhMZaQSEm4ODSOXy6BULKLp+QZQDIu5uSdoad6FSPAxdfho9z6iLVCtrU31UxMzFz+8fEU5/dJx3H/4JxZX51HFlaHIeSgoIillwGiKoJkSZgLzONDepMxFQmSrpIjRaJyNrsVj8Q0pNxuad5sMHHg9D51eD4fDgfHxKVit1UTkhqash9e7f/32zfs/hALz14jBJE0GOb2Z8cuF4lKLy9Ez+UdgQUpnJKPBZCmTrydiSdJgPDieKaUS8tj33/14dXU5Okh0jwgVDRn+gXpJjlVmuqvbe6barBXJDiXy64zJ+ObS9GT4Fnl3lzBGuIWdBirUoqrX2ECoNpdqplRiGUK18lstvA3gbxZYP2SpjqhfAAAAAElFTkSuQmCC",
    939:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWITgfohm8AAADX0lEQVQ4T6VUz28UZRh+vvk9O7PbnYEWu9mKJcVEQCERauSiJmLiwZCq6MEDB7mYeDHe/AO48y+QGCMX5GKMATQEJTYu0NhqbQm1trvb3aVLd2d255vfvlM6jWA4+SbPvMnM+zzf++sb/F9jO/5pJuz43JIdv2tPEygVP3//9HOn35gWR1V0f/k1cC/+dKt7/bcf6VuXsCv0H4GJN09W/HNnLvdPVafDYoJCGsJe7UBYaKVjl1a+mfvq6884sEah2yJPpigfHJ34tBC0p0NFRBwCTu0eVq/exYrjsbEXDs1Y1WdPUVyZsM0Vs8eOCcc/fPuto+fOXIj/rkt+pwVtrgntfg8mj2C1erj/5Q84ceXCO8b+Z6obV2/ViOPsCti2XZk6/8WV5cmyvX75W7iuDN6NCSEG8xtwZ1fBqlX0yipT33v5peD3tYTfW6vlAuKxjz/4xD478+5f87fhv3Ic/VenENo2kvIIkkMHkJYNCK4HTqWFYwUEl64/CJoPbuY9UIXXp19rLNxB0OrA6w8RNbcQc45kRAMKMqDIiKYqSPboCL+vIVxv+MQTcgFL09nJ4d4EOr3yk5QCLSALWaepOTFw5AhkzYSy0UISezQ+JeOlucBENF4wGu2H6M5MYrzYw+jSIqzBJvZ5HPuX1zB+7Sb4RADno8NwnIgW4FH1EiHbhd5gvt6X/lyylFoRfgpEmz78oY+BqIC1XYgJjf0G+bstSB0flNMm8aJMgMKxxTSzzjsda7DaReRyRFsczKNFiGNECYF6ICo6UpGBKQrSNG0Sb5CXEMT23oZRGYNaUKEpGoqlEgqGAUPVYRIEyGCcmkKCpEg+pYVEkAt4vOtvqamGREghKQKdFkE2qD41hlIuQR8xYWoiRBaBUUaU9zY3F4B3e3ZILGgynZQOkQwcSHxIU6GUwz6MYReS76IgitAkBQITHrsLKb/28519pgU9oK2i4ciyvp1q4lDj+hxxEFI2EhKd7ggL44hTo8jyTUx5oxUb1cqLkqxWBIGxjBj7lIlLfuiBKJDtEcSUQdhsL4f15nfUyaV/X+dRwlGpZJ6wDh88JlbKdqIKqvL8pKIwXfPr9Wgwu+A5iyt/xDyYo9gbhMUn/wcmYQ8hE6MWQiVkMZnPaqa54iFhg9AGwP8Bhz9000cOZ9cAAAAASUVORK5CYII=",
    944:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIgOFhKNbAAACzUlEQVQ4T31US0wTURS903nT6Q/Kr22AihAJ4g8SBY0khLBAY1xAjGw0JsaNW9y5MzFuXBhNdKNLY/wsMHGjYjQaFIGoQMAgloIYbEGgYD8MZT7veaczkQ4FT3LnvZx77pl5974MB9sjO8fMNQdbGrTXewsaKx0diqJV/I7L4Qd9iVcpgBimcox4c80GadhTfX5nPruXL5BWtyevXfEEJqajS1OYkw3JBmzmmg1HTe2Rs/2zBCKaH2obTpC21mMdyJcYaSu2MmDR6Ynh8vIdcOHqHViMxuDl8xc/kN9Km0v6fD5O0IT5lsIguJIyiAlK8wNBiqk1jP81HSAQCLhvX+7q7um6SHtuXWep2Rm2/jPMVHlN7n54/xJKijC2NeGf3bzStTQxwm6c6WSnmg6zcGicMaoxpqSZGl9Uzp1s60Sdy5AbyD4CcawmgwVlVTAyMwevR8fA5RKQ1oCmUiAND5H9lRXHkSjOqE0Qc9XBfesfp/uahmAuGgWeqHDtdCc0H6gDQVYg+uE9LB9ttqPO0jfLPdjtK6qbHOhv6538DiqzwefZeXjyaQSejn4F5vOD6HZ+/BKa6kNp3KjY5FZK15S7b95BbFUCqlKQNQoUL5/KGBDOBiuSpE/CAotBdU2QefNcWMABwS9QqD49o+0ufPxJJpZxq2ZIExYD795djAgE3BwPaU0zWcPAyfOQTElJ3K5mSBMWg1Aooha4neDgGEjaxot0A0Gww1wsvm4wG7AYDEYWVzgc3QLu9XKRELDbbOAXRVBEl7KQSKQzwixkG7DB8fBk7cHGKLHzIGAxx3HgFXko9ReCw184JqXTeg8UQ24ge4wslkix2Eoy0nKort7pySMBj5tVlRTTktLygUdvex9TSgdRp3/gv//C5nutG5bxPN/osNvLGNM8WMSlZfUX8sMYYQzLMTYb6NBN3BgihgdDP6be/ZwRAgD8BTF1Db7ycYIXAAAAAElFTkSuQmCC",
    928:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIQOuqfCYAAAC1UlEQVQ4T+2TyWsUQRjFX1d19/SMmZnEDCadBI0aF+KGiCAY8BA8BATRi2e9e/HgVfA/UE96EQ+K6EEEFUSUKHEFTdQsZhJjxiSz6cw4W08v1d1+rUnQ6ME/wAc/iuar97rqqyr8F/ji+DepRJSQCW+RPyQtjr+ppQXxI13qecjssN7UnBro6h68PJ668SFfmrMk+KXGz3kfS+bXlQFS/6bQ+u2tkavtmrMvJwTawhoG9HW4PjeLLw3b7glxt2h4mP7GZ25NVY+xRWMgaX+3snNTTBm0ZGdfnTYXVVXMWAYyRgUJ14UnQ20Oq+FdrfHQcK7xnDzaryuInt7T+gKa1csUCUymEsW3ayoOrtHBpTCKLseld2N4s2C+HMnYF8jzYLmJmob2Uzt6zvZ1bWSzwsRgpYCCbcORLORFCWHVx9aWzdCEMC+N5C8Kz39CtrmlAGl3QtsVbWmc0GOKdKhdx9F1vRQawcNKBQumjZRRw7N0Ek9TpcJoXlwhzzBhLgUoazul44mYfCDrFGHCgusZsLwa+uJxRHwF46aDbYqCHi3q3581rpNnhhA/mrhdVzf2d8ROxmSGyaKDm5kcntc+Yaqew71sCiEucKZzPWZcoMw9hXM0Bb5AXAcim/XQuYWqlSjXnKrRkFhD4tynPnZGgJzpYt4xka4XcTSxASOVGktmrScN4Y+S3+I1ID5ddMofC+6riS/uo+RXMVQuecmmCO8IMd4cZRwpU6Boe8jbdcRcJo1mnaGK7b2ngOC0QQtDiRgjJogpw/EnpjLiNf083hyVuzdEQsz1fMwbHLmy23ibte64HsZp7nJAlQguqEnQolAgsplv7vhswUlrstIbVtmq1RrHZFoMfy6J21RPEs7yPVghnwgC6fYiNVe0p1Ww1asspueq7uNM3b1LtWww76+PaYWC17iG2BJX2V6NMWqsuEbf80HxXwKWRGeCNkIh0gRtFfgO6Ds8GiTd4mgAAAAASUVORK5CYII=",
    6532:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIgFrisJ3AAAC90lEQVQ4T92QWUgUcRzHv7Mz615TrUd5lJapbSG1uGYHFpZYFFERQYVBkVD0FL300ENJPRp0GPRQINJLp0VFWJkRpF1e1JpH7aHpXs6qmznOzo6z039GJYh6CHrqA5+B3/zm92V+P/wnlJSAqQR00+VfoQ7pdi/Pz999p/x2ZWUJM/X6t5iar2069qy67PB0raEG6J+2cAvNgdCuI5uKWiOR67lTrZ+sz8/IfF+3tz1HES8lG+kqV3350emWFkCFOSEpNhxShM9OO+9se11/tmzHVFsjwZbHOqiIYDMlWbBs1WLrgjX5Fx/c2rdFbWp768xmSrGylDEQhP/+m7ntzsG6KyvzTpAWc62ydCktUQW0FKO8rUEwC1IgBzhDsSPjRnX1HrsW0DswNs6zcyZiDIPvrkEwA6PMU1egqnxj9qOD5cvbzhwvPuVpdoFXKAx3+6Az6hEbGJrV2NibSJN5RRAnWZ97JC8zxZzj7gzCtpTF6orNOFRRmGtaNF+ncCFKivgx4ZKhX2TBkDsMjkf49PkXVVoAUfjCRZklc5hCowS26VUEVqOIFbty4WvuAZM6F189NNpbPHj10gudRCE1Pa3vSp3zqhqgEiPyTv9EolmI2/3jMd22/Q5YqDhMtAjaOAsptrVoetwEiJPguHHoqFj/vZZAjXYDgkzsG4nKD3vEeJcECgkJBgx0hvGhwY14XMY3twfzCnKQbkvGsBCHLzjuJjPSTIAKT/wk03ibbDIok+Q33zV44PUJ6H7pRO2pWjx58AGOrUXIXpwEcvCQOjSzwgxSUJANaVbW0dM7lJiZZYHRKIP3j+Bu6yhOnitFZ0cItx92oysSrQmMRjt+DVBX4b18NEER4/b0jAzDuu3FCI+K+OLllI894U8X7ne1jYny8/4R4Sb5ltOmfkFPLCTJl5P1tPvAhjxp7UKrZGct6s471R7RRrQQybV+D0vMIq6jKRSQxMmogmekbiZGiCpx9fGnABX1wLOJiVo1NThGVNf8VwA/AKzdMGoQwP3TAAAAAElFTkSuQmCC",
    927:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIQlOfBmGAAADSUlEQVQ4T61USW9TVxT+3vObJ5u4xkntYIcgcCJSUBu1mLa0UjYtbECs2CKBkFhUKmLLmj/ArsOGVpUoEqKtGtRBlNKqi6jpIBEGtQQjPCR2eB7iF7+x59oyKdBlP+nzub7vfJ/PPfc84/+EkkrBoKizNZFnmwSOyNYsPof+ZtayRk6cPPSNpil+FAnLjbpT/vKr7y8V970S9np2fHp6Z/HCB1cv8qrbKJWabZL4TMcwdB07c+rwR/v3z75j6QkYZsoJgk6gKIbqdHvR6lo1tvDr4s93b92e//za4oeUXxnINst0vA2/0e303FK1hKV7C+q6s27wMT7muLZg2xVux0S6GITcbsrVBpIBhgb45NK387XVWluRVURhhNDz0Gm30HUc6GYc6dE8n932AjNIEmN9EWFo0I1k6W671S0ZuolUchSpdA73S0t0Rg4xjhF4Y99reVJalP+cgV+c2WnNHThQmJkpYmJyGkHgQpE1ij78IERlpYxypSVRrklksY+hAScISC4t/aH8+duPWP7rFmrUiyjiwcdECKIMXdWQzYyJufH0LsoXB7LNUuTZvbkjhd073ipXSpzdacG2baw1VvDYrsNxHVBjELd0SLzv/bJ47wZpHjOhwD4IfGG68DL5cFxMgq7HoWkmsqPjUDUdppmAJMn46eZ8+eLlazcpPxzINo+gcZH3kqYqmMwXkE2PYlsmR0YmZEFEo/4Qd+4s4IfrN8qilKhTPhumiAn7FSiKom7PjydcdwOd9SZCinq7CUUz4HsuurRebXTrX3z3+/VavbVIEmbQB6uAy2e2bq2urGprzQYC30M8PgLH6eLB8m1UKw/oFiLc//tRNcYHbAKXidSUAfpHyGaSuYRhiib9oqHF4QUeSANJVKg6FYoqYc+eiSnP41j3n5pEdgRxIjPy5seffj2fTJqW5wee23I6c3Ovv6qohhxKgub11ukqfUFVBYl6/6SBDOxlUrZY2tudzkbWC8MafQ/pbnkqIBW3tNTU5NhUaaUZnTt78ujp98+/RzlXKKd/hUMwEzbfLxITRPZ/wMpMEceJs8R3jx87+BnFQ8SnjvAsthCfTWDDxvaLxAJxODv/CfZwOBv/BqtSJj55BwYA/gE88ytKkN9ILwAAAABJRU5ErkJggg==",
    926:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIQFAp5G0AAAC/klEQVQ4T+1Ty27bVhA9vHxJFGlKlAkjsg1LsmUHDhonfWwKFK5bd9FF0UWB/kr/Jh+RbrItEqSL9IGgDpDYkGXLsiyLEqmXSZEiqc6Vgra7/kAOcMDLAc/cmTNDfACE98//AyOKyyNSYrI8/ptA+PzjnWouq+7vVe1de9U2pIzuzGYpzBVjLCTR7nw23HB7Dht4wzdPn797etmZ1EkXSUs9mL2SOb5ftX/aWrcqhaKZPn70CRPmgOM46Pdd+OMAlbUyLtvuZP7i3CNNj+jw0jhUq6B9s1/bqDDGEIZTdtW8xOs/X6F11UC/dwvfD6DpNho3o07PncxIw1tZ9IZ7uq7tlEuPZVGGKskwNR3droPS+jqMXA7TMEAQhbi+7eKs0XL8cDYgmf9PAi+OtTRJ7I7jgskypsEdPCo7o6qo1nZwcHCA73/4EbXtTVTKZcswsjHXcfAEwuGntV1VZroophiPRghnAvJ5DZ7n4fz8AtNYwMlfp3AGQ2QUQfH9SF3KgYWJlmVtHjz8CH2ng+v2Ddo3dciyhK4zgqRI8AavoWkZKKqGNI2HSZKMFmoCr0C5G3lGRlHTB/v38dXREY6PvsDOdhlxPF20E0UzFFZMrK0WEPhBgTS8f5rRcjnkR3v3Dou59DghgWlZdDsZaWqobJZg6DmYhTySMEabTITA/Bd/NJ6R7pIY8wRSVlX2a1vFY9dzRTITAd3abrdw0bzGaHIHjcw0zRx0LQd3EJ3+8tvpz+8TpLwF+evPKt/NE0FxemOcvK3jrF6HJEhgAqNVFdFottBstnHd6eLk7NwlzYS4WGdWKholJoqHYTRF0dKhMIFmnqDvOljJZeZhlMK2bIT+lJIyXN0OWqQbczGHtLe9tvXs13dPdjcK1TmSLFkji4pkvnrT+F2RMszUc9nVvL7avu0Pvz18+GW3f9cgXUBcmMh/pg1imcj94C1pRD7eIZGPyyDyeF5mzJ6l6QWdXxJ5G4sECyP5y3/AY7xHvvMyDxD4N3yBeJwnpgqAvwEO2DHZkryUQAAAAABJRU5ErkJggg==",
    950:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIQ1JEd2fAAADQklEQVQ4T6VTTWgTQRR+u7P5a9KfZNPUNrW2tVZU/CsaCm1VGi0qVhRRUQRFbypeBEVBFAt6Ei/iQUQP4kG8FAURLIhSrFiRGvqbpKYmabcbt6mbbmO6bbK+WdPaxqMffOzM2/d9M+/NDPwvSPabC0OWGX0GwHq9XkcqlWIURZnLxnSw2e9icBevnD1//8GNqzjm/4TA0tS88eWdu9cWx3TkGnDX2y7Ud334DKY801GclyPpLvOVpFIhxH6swnEBcgG5BnzNqurnvxSlJuAPlxBCnBijOcwvdc4aCPotOF5S9j8lvHnb1X3izMHDE4lYIe+yVWLIimQyaZVJa+o/Pcs1SPT29L+2FRiLOaOFadq5dQvG8sAMnNnKstjW9J+0v8g1UAcGgp9GRwVZ0zKwvKKkFmM2A4F8IKxhRk3S+unpMDSZIteAafE2bAr6I8NudzFY86wrMOZgOZNrNg2G+IRM823IBd1iA1off/L0octu14piMTIJe7y7q/e2Nq+rrK7Mn0kxpKqsuvHB41unMM+hKxDzTbHdv3f7Fq5o+T4eXesusztDEcE0Lkrk4IFdpR0d74fKKh2tM+k5JjAYEfq+DnajJkaFdAdMXd362uVV7nNtNy89ZFlSusGzpiCT0eTe3j7IcGpdU4NnvzqThnB0JPrsSfsr1MhUTEF3wAhCjPhDw0DM3JZjR/a5un0+w0hQiDAMOMORKLujpb5WGJdAEISxiF98ipo+pH4i8yWoQlQcC/gDosNVuI1fZic9XwYdRrOZictxmEhIYLVYYXIyEQsNRNsxP4zUqHDegD6QuPxTkcS47InLo+XOkkJGkVNQsdINY2ERCOGAdzosoxHx7XQiGcxqFgwo6Mszb2/Y2ZZQZg2SFNdFBNtUVFSEfwmUOIuNmVl2bjgQ+oC5CSpacg94nq+RZMnistvBXVoOg/1hEMdkCAXGwYwldHf2S53vPvZgqt47qllswMmyPJ1Upl58Gw6rTIaFzRtXg6algeNY4DSi+Hp6HyWVZBfmTiD1HixcySzoW681Go2NnkbPcWLQ7FazccTnGxqKCVJITakf8f8XpL59ilwDChOyDEnfvh2ZRNIV6cURkVPILAB+AxmvNGZ5vzctAAAAAElFTkSuQmCC",
    941:"iVBORw0KGgoAAAANSUhEUgAAABAAAAAUCAYAAACEYr13AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAGYktHRAD/AP8A/6C9p5MAAAAHdElNRQfbAxAWIRVafUXJAAADEUlEQVQ4T92T204TURSG1xw7PVCm9EChHESxgIBRQmI4KBETTTB664VeGXkGX8AYr43PoHeQqInGBAjRRKMxKh4QRYQepLTQTmdKO8dd165A0BgfwD/5svfOrP+fmbX3hv9TQhjAhyP7a/lvcTvjns50BU95A+6RdL6yhksboTVV+uxv+jNA6gy7blwZjVz1cMxAW0C83NvkHVzaqLzDZ84Ov2l/ADsWD5wY7wtdl0Q+GvS6e2S3EE8pesl2GI5hWL9uOTrWUegX1b5qf4Dv2lj7dCzk7tgqGrBdtqCALKyqpZGu8HhEdh0Pe7i4x8W2uBhgNZMo6DF3A7jJk82XsHBSMywmFvJA18EIJDaKm+N90dD5odYIxwktPSF+cPiQPJHM6/VJxXyBvsJup+XWEH9rQ1WY7jYf1Hl4MLZV6GyUQgPxYF0ii/OIxBzrizFF3bZNi3Sgpx5haQAz0R8cxXk0Hg3Cas6GtYQCBdWABr8IC2s5aJQlbJ8OGQzy1nucpGY/Rp+J1PZa7G33DQ8cCoKFi4+reWhsrIN1RQORr4KbByDYfJfIgF3W4Mmr1OJG0XiDpWmEsPi7DYbDXJh6mUqtbWpw+ngrtDSH4dxQGywnCnAsHgafRwCjbMKHpJZ7uly8j8YvSBEBzstzZ7/8KLXwDHPkaIcsOrYFW5oOtmlDLBqA72kNXn/KgmVaYBLR2izZiYxqzqKX7gJwboEb8wuslC9ZapOflzfzmrf3YBhW09vwNVWCTKECF08eAMktkJsPVu5+Xi/Po+8botUCKjap5nUnrdugd8viyNGYj3v4NptSSts+iSeszwVq/+Gg696z9OLs+8IUqVbn0JdBCA2gTVxCnnsEZkWxSeH2/PojXTUCb1a05YoJP+7MZKZnXueNLYUVHCD0rfTf6R2piR4kuh1mxa46Jqn6l3OVrxWTbOU0kppdUubyZedFX6yuaX4x+zarmc+wdveS1cTsjFT0YMQQemEaEBEpI7mYLI2uqzpLCNDmpZA97Q+goiZ6HOi4K3ppmhE8EZBEDGRHAD8BSY5KjTLZZOkAAAAASUVORK5CYII="
  }
}
var common_materials_sorted = Object.keys(GuildWars.common_materials).sort(function(a,b) {
  return GuildWars.common_materials[a].name.localeCompare(GuildWars.common_materials[b].name) > 0;
});
var rare_materials_sorted = Object.keys(GuildWars.rare_materials).sort(function(a,b) {
  return GuildWars.rare_materials[a].name.localeCompare(GuildWars.rare_materials[b].name) > 0;
});
for(var i in GuildWars.common_materials)
  GuildWars.common_materials[i].model_id = i;
for(var i in GuildWars.rare_materials)
  GuildWars.rare_materials[i].model_id = i;
// Items to show in top bar for price quotes.
var price_quote_summary_items = {930:1,933:1,934:1};
for(var i in GuildWars.item_icons) {
  if(/http/.test(GuildWars.item_icons[i]))
    continue;
  GuildWars.item_icons[i] = 'data:image/png;base64,'+GuildWars.item_icons[i];
}

var KamadanClient = {
  poll_interval:3000,
  ws_interval:60000,
  debug:/local/.test(window.location.hostname),
  isVisible:function() {
    if (typeof document.hidden !== "undefined")
      return document.hidden == false;
    if (typeof document.msHidden !== "undefined")
      return document.msHidden == false;
    if (typeof document.webkitHidden !== "undefined")
      return document.webkitHidden == false;
    return true;
  },
  onVisibilityChange:function() {
    if(this.isVisible()) {
      this.connect();
      this.log("Window is now visible");
    } else {
      this.disconnect();
      this.log("Window hidden");
    }
  },
  disconnect:function() {
    var self=this;
    if(self.ws) {
      try {
        self.ws.close();
        setTimeout(function() {
          delete self.ws;
        },250);
      } catch(e) {
        // Silent
      }
    }
  },
  connect:function() {
    this.pollWebsocket();
    this.poll();
  },
  log:function() {
    if(!this.debug) return;
    console.log.apply(console,arguments);
  },
  error:function() {
    //if(!this.debug) return;
    console.error.apply(console,arguments);
  },
  max_messages:100,
  pricing_history:{
    model_id:930,
    chart:null,
    from:(new Date()).modify('-30 days'),
    to:new Date(),
    scale:(36e5) / 1000 // Hourly
  },
  last_search_term:'',
  message_alert_checks:{},
  current_display:'live',
  last_search_date:null,
  search_results:[],
  messages:[],
  getSearchTerm:function() {
    return (this.search_input.value+'').trim();
  },
  promptDelete:function(message) {
    if(!message || !window.client_player_name)
      return;
    document.getElementById('delete_message_sender').innerHTML = message.s;
    document.getElementById('delete_message_cmd').innerHTML = "/whisper "+window.client_player_name+", DELETE "+message.t;
    document.getElementById('delete_message_modal').style.display = 'flex';
  },
  clearSearch:function() {
    this.search_input.value = this.last_search_term = '';
    this.search_results = [];
    this.current_display = 'live';
    this.redrawMessages();
  },
  loadMore:function() {
    if(this.current_display != 'search' || !this.search_results.length || this.searching)
      return;
    var earliest_msg = this.search_results[this.search_results.length - 1];
    if(this.last_searched_offset == earliest_msg.t)
      return; // Reached end of results
    this.search(this.last_search_term,earliest_msg.t);
  },
  search:function(term,offset) {
    this.hidePricingHistory();
    if(term)
      this.search_input.value = term;
    term = this.getSearchTerm();
    offset = offset || 0;
    var endpoint = '/s/';

    if(this.searching)
      return;
    this.searching = 1;
    
    this.last_search_date = Date.now();
    this.last_searched_offset = offset;
    if(this.last_search_term != term || offset == 0) {
      this.search_results = [];
      this.clearMessages();
      window.scrollTo(0,0);
    }
    if(!term.length) {
      this.searching = 0;
      this.clearSearch();
      return;
    }
    var self = this;
    var req = new XMLHttpRequest();
    this.current_display = 'search';
    this.redrawMessages();
    document.getElementById('search-info').innerHTML = "Searching for <i>"+term+"</i>...";
    req.addEventListener("load", function() {
      var result = [];
      try {
        if(this.response.length)
          result = JSON.parse(this.response);
      } catch(e) {
        self.error(e);
      }
      self.search_input.value = self.last_search_term = term;
      self.current_display = 'search';
      self.parseSearchResults(result);
      self.searching = 0;
    });
    req.addEventListener("error",function() {
      self.search_input.value = self.last_search_term = term;
      self.current_display = 'search';
      self.parseSearchResults([]);
      self.searching = 0;
    });
    req.open("GET", endpoint+encodeURIComponent(term)+'/0/'+offset);
    req.send();
  },
  setPollInterval:function(ms) {
    var new_interval = Math.min(120000,ms);
    if(new_interval != this.poll_interval)
      this.log("Poll interval set to "+ms+"ms");
    this.poll_interval = new_interval;
  },
  setWebsocketInterval:function(ms) {
    var new_interval = Math.min(120000,ms);
    if(new_interval != this.ws_interval)
      this.log("Websocket interval set to "+ms+"ms");
    this.ws_interval = new_interval;
  },
  getLastMessage:function() {
    return this.messages ? this.messages[0] : null;
  },
  getMessageById:function(id) {
    for(var i in this.messages) {
      if(this.messages[i].t == id)
        return this.messages[i];
    }
    for(var i in this.search_results) {
      if(this.search_results[i].t == id)
        return this.search_results[i];
    }
    return false;
  },
  init:function() {
    window.scrollTo(0,0);
    this.pricing_history.from_original = this.pricing_history.from.clone();
    this.pricing_history.to_original = this.pricing_history.to.clone();
    this.current_wrapper = document.getElementById('current-wrapper');
    this.page_wrapper = document.getElementById('page');
    this.results_header = document.getElementById('results-header');
    this.table_wrapper = this.current_wrapper.parentElement;
    this.search_input = document.getElementById('search-input');
    this.listings_div = document.getElementById('listings');
    this.footer = document.getElementById('footer');
    this.websocket_url = "ws://"+window.location.hostname;
    this.notify_popup = document.getElementById('notify_popup');
    if(window.location.protocol == 'https:') {
      this.websocket_url = "wss://"+window.location.hostname;
    }
    this.last_search_term = this.getSearchTerm();
    this.search_results = window.search_results || [];
    
    var self = this;
    document.addEventListener('visibilitychange', function() { self.onVisibilityChange(); }, false);
    document.addEventListener('msvisibilitychange', function() { self.onVisibilityChange(); }, false);
    document.addEventListener('webkitvisibilitychange', function() { self.onVisibilityChange(); }, false);

    this.notify_popup.addEventListener('click',function(e) {
      self.onNotifyClose();
    });
    
    this.current_wrapper.addEventListener('click',function(e) {
      if(e.target.className != 'delete')
        return;
      var message = self.getMessageById(e.target.parentElement.id);
      if(!message)
        return;
      self.promptDelete(message);
    });
    document.getElementById('page').addEventListener('click',function(e) {
      document.getElementById('trader-prices').classList.remove('showing-overlay');
    });
    document.getElementById('trader-summary').addEventListener('click',function(e) {
      this.parentElement.classList.toggle('showing-overlay');
      e.stopPropagation();
    });
    document.getElementById('trader-summary').parentElement.addEventListener('click',function(e) {
      e.stopPropagation();
    });
    document.getElementById('reset-zoom').addEventListener('click',function(e) {
      self.resetZoom();
      self.resetTimeline();
    });
    var days = 30;
    document.getElementById('graph-prev').addEventListener('click',function(e) {
      self.resetZoom();
      self.pricing_history.from.modify('-'+days+' days');
      self.pricing_history.to.modify('-'+days+' days');
      self.showPricingHistory();
    });
    document.getElementById('graph-next').addEventListener('click',function(e) {
      if(self.pricing_history.to.getTime() >= (new Date()).getTime())
        return;
      self.resetZoom();
      self.pricing_history.from.modify('+'+days+' days');
      self.pricing_history.to.modify('+'+days+' days');
      self.showPricingHistory();
    });
    var tabs = document.getElementsByClassName('trader-table-tab');
    for(var i=0;i<tabs.length;i++) {
      tabs[i].addEventListener('click',function(e) {
        this.parentElement.setAttribute('selected-tab',this.getAttribute('selected-tab'));
      });
    }
    document.getElementById('trader-overlay-items').addEventListener('click',function(e) {
      var model_id;
      e.path = e.path || e.composedPath();
      for(var i=0;i<e.path.length && !model_id;i++) {
        model_id = e.path[i].getAttribute('model_id');
      }
      if(model_id)
        self.showPricingHistory(model_id);
    });
    document.getElementById('delete_message_dismiss').addEventListener('click',function(e) {
      document.getElementById('delete_message_modal').style.display = 'none'
    });
    document.getElementById('home-link').addEventListener('click',function(e) {
      if(window.location.pathname.length > 1)
        return;
      e.preventDefault();
      window.scrollTo(0,0);
      self.clearSearch();
      self.hidePricingHistory();
    });
    this.loadMessages();
    window.addEventListener("beforeunload", function(event) {
      self.saveMessages(true);
    });
    window.addEventListener('scroll', function(e) {
      if(self.current_display != 'search' || !self.search_results.length || self.searching)
        return;
      
      if(window.scrollY + window.innerHeight > self.footer.offsetTop) {
        self.loadMore();
      }
    });
    document.getElementById('search-form').addEventListener('submit', function(e) {
      e.preventDefault();
      self.search();
    });
    setInterval(function() {
      self.timestamps();
    },1000);
    document.getElementById('current-wrapper').addEventListener('click',function(e){
      if(e.target && e.target.className == 'name') {
        if(e.ctrlKey) {
          self.search('user:'+e.target.textContent);
        } else {
          e.target.textContent.copyToClipboard();
          self.notify("Sender <b>"+e.target.textContent+"</b> copied to clipboard! (Ctrl + Click to search by this user)","notify-success",5000); 
        }
      }
   });
    this.setPollInterval(3000);
    this.setWebsocketInterval(20000);
    this.pollWebsocket();
    this.poll();
    this.redrawTraderQuotes();
    if(this.getSearchTerm().length)
      this.search();
    if(window.trader_item) {
      var item = GuildWars.getItem(window.trader_item);
      if(item)
        this.showPricingHistory(item.model_id);
    }
    else if(/showing-prices/.test(this.listings_div.className)) {
      this.showPricingHistory();
    }
  },
  pollWebsocket:function() {
    if(!window.WebSocket)
      return;
    var self=this;
    setTimeout(function() {
      self.pollWebsocket();
    },this.ws_interval);
    if(!this.isVisible())
      return this.disconnect();
    if (this.ws) {
      switch(this.ws.readyState) {
        case WebSocket.OPEN:
        case WebSocket.CONNECTING:
        case WebSocket.CLOSING:
          return;
      }
    }
    var self=this;
    try {
      this.ws = new WebSocket(this.websocket_url);
      this.ws.onopen = function(evt) {
        self.log("Websocket opened");
        self.ws.send(JSON.stringify({"compression":"lz","send_prices":1}));
        console.log("Websocket message compression set to LZW, see https://pieroxy.net/blog/pages/lz-string/index.html for examples");
        self.setPollInterval(30000);
        self.poll(true);
      }
      this.ws.onerror = function(evt) {
        self.error("Websocket error",evt);
        self.setPollInterval(3000);
        self.setWebsocketInterval(self.ws_interval + 3000);
      }
      this.ws.onmessage = function() { return self.onWebsocketMessage.apply(self,arguments); }
    } catch(e) {
      self.error("Websocket error exception",e);
      self.setPollInterval(3000);
      self.setWebsocketInterval(self.ws_interval + 3000);
    }
  },
  last_drawn_hash:'',
  clearMessages:function() {
    this.current_wrapper.innerHTML = '';
  },
  redrawMessages:function() {
    var html = '';
    var to_add = [];
    
    if(this.last_display != this.current_display)
      this.clearMessages();
    if(this.current_display != 'search') {
      document.getElementById('search-info').innerHTML = '';
    }
    var messages = this.current_display == 'search' ? this.search_results : this.messages;
    
    for(var i = 0;i < messages.length ;i++) {
      if(document.getElementById(messages[i].t))
        continue;
      to_add.push(i);
    }
    if(to_add.length) {
      for(var i = to_add.length - 1;i >= 0 ;i--) {
        html = '<tr class="row unanimated" id="'+messages[to_add[i]].t+'">\
          <td class="info"><div class="name">'+messages[to_add[i]].s+'</div><div data-timestamp="'+messages[to_add[i]].t+'" class="age"></div></td>\
          <td class="message">'+messages[to_add[i]].m+'</td>\
          <td class="delete"></td>\
        </tr>' + html;
      }
      
      if(to_add[0] == 0) {
        this.current_wrapper.insertBefore(HTML2DocumentFragment(html),this.current_wrapper.firstChild);
      } else {
        this.current_wrapper.appendChild(HTML2DocumentFragment(html));
      }
      this.timestamps();
      this.animations();
      this.checkAndNotify(to_add);
    }
    this.last_display = this.current_display;
    this.page_wrapper.className = 'display-'+this.current_display;
    this.table_wrapper.className = 'display-'+this.current_display;
  },
  redrawTraderQuotes:function() {
    var abbrPrice = function(price,dp) {
      var as_k = 0;
      if(price > 999) {
        as_k = 1;
        price /= 1000;
      }
      if(price % 1 === 0)
          dp = 0;
      return price.toFixed(dp)+(as_k ? "k" : "g");
    }
    var abbrAmount = function(num,dp) {
      if(num % 1 === 0)
          dp = 0;
      return num.toFixed(dp);
    }
    var quotes = window.current_trader_quotes;
    var html = '';
    var overlay_html = '';
    var latest_timestamp = 0;
    for(var i in common_materials_sorted) {
      var model_id = common_materials_sorted[i];
      var mat = GuildWars.common_materials[model_id];
      var icon = GuildWars.item_icons[model_id] || ''; // TODO: Placeholder
      for(var quote_model_id in quotes.buy) {
        if(quote_model_id != model_id) continue;
        var q = quotes.buy[quote_model_id];
        var name = (mat.per && mat.per > 1 ? mat.per+' x ' : '')+mat.name;
        var price_per = q.p / (mat.per ? mat.per : 1);
        latest_timestamp = Math.max(latest_timestamp,q.t);
        overlay_html += "<tr class='common-material-row' model_id='"+model_id+"'><td class='trader-mat-name' style='background-image:url("+icon+");'>"+name+"</td><td class='trader-mat-price'>"+abbrPrice(q.p)+" (100k = "+abbrAmount(100000 / price_per,2)+")</td></tr>";
        if(price_quote_summary_items[model_id]) {
          html += "<div class='trader-price' style='background-image:url("+icon+");'>"+abbrPrice(q.p)+"</div>";
        }
      }
    }
    for(var i in rare_materials_sorted) {
      var model_id = rare_materials_sorted[i];
      var mat = GuildWars.rare_materials[model_id];
      var icon = GuildWars.item_icons[model_id] || ''; // TODO: Placeholder
      for(var quote_model_id in quotes.buy) {
        if(quote_model_id != model_id) continue;
        var q = quotes.buy[quote_model_id];
        var name = (mat.per && mat.per > 1 ? mat.per+' x ' : '')+mat.name;
        latest_timestamp = Math.max(latest_timestamp,q.t);
        overlay_html += "<tr class='rare-material-row' model_id='"+model_id+"'><td class='trader-mat-name' style='background-image:url("+icon+");'>"+name+"</td><td class='trader-mat-price'>"+(q.p > 1000 ? (q.p/1000).toFixed(1)+"k" : q.p+"g")+" (100k = "+(100000 / q.p).toFixed(2)+")</td></tr>";
        if(price_quote_summary_items[model_id]) {
          html += "<div class='trader-price' style='background-image:url("+icon+");'>"+(q.p > 1000 ? (q.p/1000).toFixed(1)+"k" : q.p+"g")+"</div>";
        }
      }
    }
    console.log(latest_timestamp);
    window.current_trader_quotes.updated_at = window.current_trader_quotes.updated_at || Date.now();
    document.getElementById('trader-item-ts').setAttribute('data-timestamp',latest_timestamp*1000);
    document.getElementById('trader-summary').innerHTML = html;
    document.getElementById('trader-overlay-items').innerHTML = overlay_html;
  },
  timestamps:function() {
    if(!this.isVisible())
      return;
    var rows = document.querySelectorAll('.age');
    try {
      for(var i=0;i<rows.length;i++) {
        var ts = (new Date(parseInt(rows[i].getAttribute('data-timestamp')))).relativeTime();
        if(rows[i].innerHTML != ts)
          rows[i].innerHTML = ts;
      }
    } catch(e) {}
  },
  checkAndNotify:function(new_messages) {
    // Cycles through these messages, if a match for notification is found, do it
    if(!window.Notification || window.Notification.permission == 'denied' || window.location.protocol != 'https:')
      return;
    var self = this;
    
    var notification;
    for(var i=0;i<new_messages.length && !notification;i++) {
      for(var j in this.message_alert_checks) {
        var match = true;
        for(var k in this.message_alert_checks[j]) {
          if(notification || !match) break;
          if(new_messages[i].indexOf(this.message_alert_checks[j]) < 0)
            match = false;
        }
        if(notification) break;
        if(!match) continue;
        notification = {
          title:"New trade message",
          body:new_messages[i].s+': '+new_messages[i].m
        };
        if(getFavicon())
          n.icon = getFavicon();
      }
    }
    if(!notification)
      return; // Nothing to notify
    if (Notification.permission != "granted") {
      return Notification.requestPermission().then(function (permission) {
        new Notification(notification.title,{body:notification.body,icon:notification.icon});
      });
    }
  },
  addMessageNotification:function(str) {
    this.message_alert_checks[str] = str.split(' ');
  },
  animations:function() {
    var rows = document.querySelectorAll('.unanimated');
    for(var i=0;i<rows.length;i++) {
      rows[i].classList.add('animate-fade-in');
      rows[i].classList.remove('unanimated');
    }
    setTimeout(function() {
      var rows = document.querySelectorAll('.animate-fade-in');
      for(var i=0;i<rows.length;i++) {
        rows[i].classList.remove('animate-fade-in');
      }
    },500);
  },
  removeMessages:function(timestamps) {
    var timestamp;
    for(var j=0;j<timestamps.length;j++) {
      timestamp = timestamps[j];
      for(var i=0;i<this.messages.length;i++) {
        if(this.messages[i].t == timestamp) {
          this.messages.splice(i,1);
          break;
        }
      }
      for(var i=0;i<this.search_results.length;i++) {
        if(this.search_results[i].t == timestamp) {
          this.search_results.splice(i,1);
          break;
        }
      }
      var element = document.getElementById(timestamp);
      if(element)
        element.parentNode.removeChild(element);
    }
  },
  parseMessages:function(json, check_against_search) {
    this.messages = this.messages || [];
    var has_new = false;
    var remove_messages = [];
    for(var i=json.length-1; i >= 0;i--) {
      if(json[i].r) {
        remove_messages.push(json[i].r);
        delete json[i].r;
      }
      json[i].m = json[i].m.encodeHTML();
      has_new = this.messages.unshift(json[i]);
    }
    this.removeMessages(remove_messages);
    while(this.messages.length > this.max_messages) {
      this.messages.pop();
    }
    // Add to existing search results.
    if(check_against_search && !this.searching && this.last_search_term.length) {
      var term = this.last_search_term;
      var search_words = [];
      var checkSender = function(msg) {
        return msg.s.toLowerCase() == term;
      };
      var checkMessage = function(msg) {
        var toLower = msg.m.toLowerCase();
        for(var i=0;i<search_words.length;i++) {
          switch(search_words[i][0]) {
            case '!':
              if(toLower.indexOf(search_words[i].substr(1)) != -1)
                return false; // Matched excluded word
            break;
          }
          if(toLower.indexOf(search_words[i]) == -1)
            return false;
        }
        return true;
      };
      var func;
      if(term.indexOf('user:') == 0) {
        term = term.substring(5).toLowerCase();
        func = checkUser;
      } else {
        search_words = term.split(' ');
        func = checkMessage;
      }
      var hits = [];
      for(var i=json.length-1; i >= 0;i--) {
        if(func(json[i]))
          hits.unshift(json[i]);
      }
      if(hits.length)
        this.parseSearchResults(hits, true);
    }
    if(has_new) {
      this.redrawMessages();
      this.saveMessages(); 
    }
  },
  showPricingHistory:function(model_id, from, to) {
    this.listings_div.classList.add('showing-prices');
    if(model_id)
      this.pricing_history.model_id = model_id;
    if(from)
      this.pricing_history.from = from;
    if(to)
      this.pricing_history.to = to;
    var self = this;
    this.getPricingHistory().then(function(data) {
      if(self.pricing_history.to.getTime() != self.pricing_history.to_original.getTime())
        self.listings_div.classList.add('graph-panned');
      else
        self.listings_div.classList.remove('graph-panned');
      if(self.pricing_history.to.getTime() >= self.pricing_history.to_original.getTime())
        self.listings_div.classList.add('graph-today');
      else
        self.listings_div.classList.remove('graph-today');
      var dataPoints = {};
      var bgCol = 'rgba(252, 247, 200,0.3)';
      var dragCol = 'rgba(108,82,34,0.5)';
      var dragLine = '#3c2d11';
      var lineCol = '#d1c190';
      for(var i=0;i<data.length;i++) {
        dataPoints[data[i].m] = dataPoints[data[i].m] || {
          lineTension:0,
          type:"line",
          steppedLine:"after",
          label:GuildWars.getItemName(data[i].m),
          fillColor: bgCol, 
          backgroundColor:bgCol,
          highlightFill: bgCol,
          strokeColor:lineCol,
          borderColor:lineCol,
          highlightStroke: lineCol,
          pointHitRadius:5,
          data:[]
        };
        dataPoints[data[i].m].data.push({x:data[i].t,y:data[i].p});
      }
      var dataSets = [];
      var suggestedMax = Math.floor(self.pricing_history.to.getTime() / 1000);
      var suggestedMin = Math.floor(self.pricing_history.from.getTime() / 1000);
      for(var i in dataPoints) {
        if(dataPoints[i].data[0].x < suggestedMax)
          dataPoints[i].data.unshift({x:suggestedMax,y:dataPoints[i].data[0].y});
        if(dataPoints[i].data[dataPoints[i].data.length - 1].x > suggestedMin)
          dataPoints[i].data.push({x:suggestedMin,y:dataPoints[i].data[dataPoints[i].data.length - 1].y});
        dataPoints[i].dataPoints = dataPoints[i].data;
        dataSets.push(dataPoints[i]);
      }
      var chart_args = {
        type:'line',
        data:{
          datasets:dataSets
        },
        options: {
          responsive:true,
          maintainAspectRatio:false,
          tooltips: {
            callbacks: {
              title:function(tooltipItem,data) {
                return (new Date(tooltipItem[0].xLabel * 1000)).niceDateTime();
              },
              label:function(tooltipItem,data) {
                return data.datasets[tooltipItem.datasetIndex].label+': '+tooltipItem.yLabel+'g';
              },
              afterLabel:function(tooltipItem,data) {
                if(tooltipItem.index == data.datasets[tooltipItem.datasetIndex].data.length - 1)
                  return '';
                var prev = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index+1];
                if(prev.y == tooltipItem.yLabel)
                  return '';
                var prevTime = new Date(prev.x * 1000);
                var thisTime = new Date(tooltipItem.xLabel * 1000);
                var diff = thisTime.diff(prevTime);
                var unit = diff.bestFitUnit();
                var val = diff[unit+'s']();
                return "Was "+prev.y+"g for "+val+" "+unit+(val > 1 ? 's' : '');
              }
            }
          },
          scales: {
              xAxes: [{
                type: 'linear',
                position: 'bottom',
                ticks: {
                  callback: function(value, index, values) {
                    return (new Date(value * 1000)).format('So MMM');
                  },
                  max:suggestedMax,
                  min:suggestedMin,
                  stepSize:Date.hour * 24 / 1000
                }
              }],
             yAxes: [{
                ticks: {
                    suggestedMin:50,
                    stepSize:500
                }
            }]
          },
          plugins: {
            zoom: {
              pan: {enabled: false},
              zoom: {
                enabled: true,
                mode: 'x',
                drag: {
                  borderColor: dragLine,
                  borderWidth: 1,
                  backgroundColor: dragCol,
                  animationDuration: 3
                },
                onZoomComplete: function() {
                  self.listings_div.classList.add('graph-zoomed');
                }
              }
            }
          }
        }
      };
      var canvas = document.getElementById('prices-graph-canvas');
      canvas.height = canvas.parentElement.offsetHeight;
      canvas.width = canvas.parentElement.offsetWidth;
      if(self.pricing_history.chart) {
        for(var i in chart_args) {
          self.pricing_history.chart[i] = chart_args[i];
        }
        self.pricing_history.chart.update();
      } else {
        self.pricing_history.chart = new Chart('prices-graph-canvas', chart_args);
      }
    }).catch(function(e) {
      self.error(e);
      self.hidePricingHistory();
    });
  },
  hidePricingHistory:function() {
    this.listings_div.classList.remove('showing-prices');
  },
  resetTimeline:function() {
    this.pricing_history.from = this.pricing_history.from_original.clone();
    this.pricing_history.to = this.pricing_history.to_original.clone();
    this.listings_div.classList.remove('graph-panned');
    this.showPricingHistory();
  },
  resetZoom:function() {
    if(this.pricing_history.chart)
      this.pricing_history.chart.resetZoom();
    this.listings_div.classList.remove('graph-zoomed');
  },
  getPricingHistory:function() {
    var self = this;
    if(!self.pricing_history.model_id)
      return Promise.reject(new Error("Invalid model_id"));
    self.resetZoom();
    return new Promise(function(resolve,reject) {
      var req = new XMLHttpRequest();
      req.addEventListener("load", function() {
        if(!this.response.length)
          return resolve([]);
        var result = null;
        try {
          result = JSON.parse(this.response);
        } catch(e) {
          return reject(e);
        }
        return resolve(result);
      });
      req.addEventListener("error",function() {
        reject(new Error("Network failure"));
      });
      req.open("GET", "/pricing_history/"+self.pricing_history.model_id+"/"+self.pricing_history.from.getTime()+"/"+self.pricing_history.to.getTime());
      req.send();
    });

  },
  onWebsocketMessage:function(evt) {
    this.setPollInterval(30000);
    var message = evt.data;
    var self=this;
    try {
      //console.log("Decompressing",message);
      message = LZString.decompressFromUTF16(message);
    } catch(e) {
      console.error("Failed to LZString.decompress",message, e);
      return;
    }
    try {
      var data = JSON.parse(message);
      if(data && data.t && data.m && data.s)
        this.parseMessages([data], true);
      else if(data && data.r)
        this.removeMessages([data.r]);
      if(data && (data.buy || data.sell)) {
        console.log("Trader prices received",data);
        if(data.buy) {
          for(var i in data.buy) {
            window.current_trader_quotes.buy[i] = data.buy[i];
          }
        }
        if(data.sell) {
          for(var i in data.sell) {
            window.current_trader_quotes.sell[i] = data.sell[i];
          }
        }
        window.current_trader_quotes.updated_at = Date.now();
        this.redrawTraderQuotes();
      }
    }
    catch(e) {
      this.error(e);        
    }
  },
  loadMessages:function() {
    if(!window.localStorage) 
      return;
    
    this.messages = [];
    try {
      if(window.localStorage.getItem('deployment_date') != window.deployment_date)
        return; // - Deployment change since this was saved
      this.messages = JSON.parse(window.localStorage.getItem('messages'))
    } catch(e) {    };
    if(!this.messages || !this.messages.length)
      return;
    this.redrawMessages();
  },
  saveMessages:function(force) {
    if(!window.localStorage) return;
    if(this.pendingSave && !force) return;
    var self=this;
    var doSave = function() {
      window.localStorage.setItem('deployment_date',window.deployment_date);
      window.localStorage.setItem('messages',JSON.stringify(self.messages));
      self.pendingSave = null;
    };
    if(force)
      doSave();
    this.pendingSave = setTimeout(doSave,5000);
  },
  parseSearchResults:function(json, already_html_encoded) {
    if(json.length) {
      var push_or_unshift = this.search_results.length && this.search_results[0].t > json[0].t ? 'push' : 'unshift';
      if(push_or_unshift == 'unshift') {
        for(var i=json.length - 1; i >= 0;i--) {
          if(!already_html_encoded)
            json[i].m = json[i].m.encodeHTML();
          this.search_results.unshift(json[i]);
        }
      } else {
        for(var i=0; i < json.length;i++) {
          if(!already_html_encoded)
            json[i].m = json[i].m.encodeHTML();
          this.search_results.push(json[i]);
        }
      }
    }
    if(this.search_results.length && this.search_results.length < 25) {
      // No more messages to get; manually set last search offset to avoid polling again
      this.last_searched_offset = this.search_results[this.search_results.length - 1].t;
    }
    this.redrawMessages();
    if(this.current_display == 'search')
      document.getElementById('search-info').innerHTML = "Showing "+this.search_results.length+" results for <i>"+this.last_search_term+"</i>";
  },
  poll:function(force) {
    var self = this;
    if(!force && self.ws && self.ws.readyState != WebSocket.CLOSED)
        return;
    if(!this.isVisible())
      return this.disconnect();
    this.log("polling");
    function requeue() {
      if(self.poller) {
        clearTimeout(self.poller);
        self.poller = null;
      }
      self.poller = setTimeout(function() {
        self.poll();
      },self.poll_interval);
      self.log("Poll queued");
    }
    var req = new XMLHttpRequest();
    req.addEventListener("load", function() {
      if(!this.response.length)
        return requeue();
      var result;
      try {
        result = JSON.parse(this.response);
      } catch(e) {
        self.error(e);
        return requeue();
      }
      if (!self.ws || self.ws.readyState != WebSocket.OPEN)
        self.setPollInterval(3000);
      self.parseMessages(result);
      requeue();
    });
    req.addEventListener("error",function() {
      self.setPollInterval(self.poll_interval + 3000);
      requeue();
    });
    req.open("GET", "/m");
    req.setRequestHeader('If-None-Match',(this.getLastMessage() || {'t':0}).t);
    req.send();
  },
  onNotifyClose:function(){},
  notify:function(message,type,dismissable) {
    var notification_popup = document.getElementById('notify_popup');
    if(!message) {
      notification_popup.className = '';
      setTimeout(function() {
        notification_popup.style.display = 'none';
      },600);
      return;
    }
    notification_popup.innerHTML = message;
    notification_popup.style.display = 'block';
    setTimeout(function() {
      notification_popup.className = 'notifying '+type;
    },100);
    var self = this;
    self.onNotifyClose = function() { self.notify(false); };
    if(typeof dismissable == 'boolean') {
      self.onNotifyClose = dismissable ? function() { self.notify(false); } : function(){};
    } else if(parseInt(dismissable) != NaN) {
      if(self.dismissTimeout)
        clearTimeout(self.dismissTimeout);
      self.dismissTimeout = setTimeout(function() {
        self.notify(false);
      },parseInt(dismissable));
    }
  }
};
//KamadanClient.notify("Message @ "+Date.now(),'notify-success',5000);
var favicon;
function getFavicon(){
  if(favicon)
    return favicon;
  var nodeList = document.getElementsByTagName("link");
  for (var i = 0; !favicon && i < nodeList.length; i++) {
    if((nodeList[i].getAttribute("rel") == "icon")||(nodeList[i].getAttribute("rel") == "shortcut icon"))
      favicon = nodeList[i].getAttribute("href");
  }
  return favicon;        
}
function HTML2DocumentFragment(markup) {
  if (markup.toLowerCase().trim().indexOf('<!doctype') === 0) {
      let doc = document.implementation.createHTMLDocument("");
      doc.documentElement.innerHTML = markup;
      return doc;
  } else if ('content' in document.createElement('template')) {
      // Template tag exists!
      let el = document.createElement('template');
      el.innerHTML = markup;
      return el.content;
  } else {
      // Template tag doesn't exist!
      var docfrag = document.createDocumentFragment();
      let el = document.createElement('body');
      el.innerHTML = markup;
      for (let i = 0; 0 < el.childNodes.length;) {
          docfrag.appendChild(el.childNodes[i]);
      }
      return docfrag;
  }
}

KamadanClient.init();